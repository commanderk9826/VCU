
VCU_230504.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006054  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800622c  0800622c  0001622c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006244  08006244  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006244  08006244  00016244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800624c  0800624c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800624c  0800624c  0001624c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006250  08006250  00016250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  2000000c  08006260  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08006260  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119dd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c7e  00000000  00000000  00031a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00034698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00035598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a70  00000000  00000000  00036330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012edf  00000000  00000000  00059da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db9a5  00000000  00000000  0006cc7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148624  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd8  00000000  00000000  00148674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006214 	.word	0x08006214

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006214 	.word	0x08006214

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2uiz>:
 80007e4:	004a      	lsls	r2, r1, #1
 80007e6:	d211      	bcs.n	800080c <__aeabi_d2uiz+0x28>
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d211      	bcs.n	8000812 <__aeabi_d2uiz+0x2e>
 80007ee:	d50d      	bpl.n	800080c <__aeabi_d2uiz+0x28>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d40e      	bmi.n	8000818 <__aeabi_d2uiz+0x34>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	fa23 f002 	lsr.w	r0, r3, r2
 800080a:	4770      	bx	lr
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	4770      	bx	lr
 8000812:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000816:	d102      	bne.n	800081e <__aeabi_d2uiz+0x3a>
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	4770      	bx	lr
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	4770      	bx	lr

08000824 <__aeabi_uldivmod>:
 8000824:	b953      	cbnz	r3, 800083c <__aeabi_uldivmod+0x18>
 8000826:	b94a      	cbnz	r2, 800083c <__aeabi_uldivmod+0x18>
 8000828:	2900      	cmp	r1, #0
 800082a:	bf08      	it	eq
 800082c:	2800      	cmpeq	r0, #0
 800082e:	bf1c      	itt	ne
 8000830:	f04f 31ff 	movne.w	r1, #4294967295
 8000834:	f04f 30ff 	movne.w	r0, #4294967295
 8000838:	f000 b974 	b.w	8000b24 <__aeabi_idiv0>
 800083c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000840:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000844:	f000 f806 	bl	8000854 <__udivmoddi4>
 8000848:	f8dd e004 	ldr.w	lr, [sp, #4]
 800084c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000850:	b004      	add	sp, #16
 8000852:	4770      	bx	lr

08000854 <__udivmoddi4>:
 8000854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000858:	9d08      	ldr	r5, [sp, #32]
 800085a:	4604      	mov	r4, r0
 800085c:	468e      	mov	lr, r1
 800085e:	2b00      	cmp	r3, #0
 8000860:	d14d      	bne.n	80008fe <__udivmoddi4+0xaa>
 8000862:	428a      	cmp	r2, r1
 8000864:	4694      	mov	ip, r2
 8000866:	d969      	bls.n	800093c <__udivmoddi4+0xe8>
 8000868:	fab2 f282 	clz	r2, r2
 800086c:	b152      	cbz	r2, 8000884 <__udivmoddi4+0x30>
 800086e:	fa01 f302 	lsl.w	r3, r1, r2
 8000872:	f1c2 0120 	rsb	r1, r2, #32
 8000876:	fa20 f101 	lsr.w	r1, r0, r1
 800087a:	fa0c fc02 	lsl.w	ip, ip, r2
 800087e:	ea41 0e03 	orr.w	lr, r1, r3
 8000882:	4094      	lsls	r4, r2
 8000884:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000888:	0c21      	lsrs	r1, r4, #16
 800088a:	fbbe f6f8 	udiv	r6, lr, r8
 800088e:	fa1f f78c 	uxth.w	r7, ip
 8000892:	fb08 e316 	mls	r3, r8, r6, lr
 8000896:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800089a:	fb06 f107 	mul.w	r1, r6, r7
 800089e:	4299      	cmp	r1, r3
 80008a0:	d90a      	bls.n	80008b8 <__udivmoddi4+0x64>
 80008a2:	eb1c 0303 	adds.w	r3, ip, r3
 80008a6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008aa:	f080 811f 	bcs.w	8000aec <__udivmoddi4+0x298>
 80008ae:	4299      	cmp	r1, r3
 80008b0:	f240 811c 	bls.w	8000aec <__udivmoddi4+0x298>
 80008b4:	3e02      	subs	r6, #2
 80008b6:	4463      	add	r3, ip
 80008b8:	1a5b      	subs	r3, r3, r1
 80008ba:	b2a4      	uxth	r4, r4
 80008bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008c0:	fb08 3310 	mls	r3, r8, r0, r3
 80008c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008c8:	fb00 f707 	mul.w	r7, r0, r7
 80008cc:	42a7      	cmp	r7, r4
 80008ce:	d90a      	bls.n	80008e6 <__udivmoddi4+0x92>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008d8:	f080 810a 	bcs.w	8000af0 <__udivmoddi4+0x29c>
 80008dc:	42a7      	cmp	r7, r4
 80008de:	f240 8107 	bls.w	8000af0 <__udivmoddi4+0x29c>
 80008e2:	4464      	add	r4, ip
 80008e4:	3802      	subs	r0, #2
 80008e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008ea:	1be4      	subs	r4, r4, r7
 80008ec:	2600      	movs	r6, #0
 80008ee:	b11d      	cbz	r5, 80008f8 <__udivmoddi4+0xa4>
 80008f0:	40d4      	lsrs	r4, r2
 80008f2:	2300      	movs	r3, #0
 80008f4:	e9c5 4300 	strd	r4, r3, [r5]
 80008f8:	4631      	mov	r1, r6
 80008fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fe:	428b      	cmp	r3, r1
 8000900:	d909      	bls.n	8000916 <__udivmoddi4+0xc2>
 8000902:	2d00      	cmp	r5, #0
 8000904:	f000 80ef 	beq.w	8000ae6 <__udivmoddi4+0x292>
 8000908:	2600      	movs	r6, #0
 800090a:	e9c5 0100 	strd	r0, r1, [r5]
 800090e:	4630      	mov	r0, r6
 8000910:	4631      	mov	r1, r6
 8000912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000916:	fab3 f683 	clz	r6, r3
 800091a:	2e00      	cmp	r6, #0
 800091c:	d14a      	bne.n	80009b4 <__udivmoddi4+0x160>
 800091e:	428b      	cmp	r3, r1
 8000920:	d302      	bcc.n	8000928 <__udivmoddi4+0xd4>
 8000922:	4282      	cmp	r2, r0
 8000924:	f200 80f9 	bhi.w	8000b1a <__udivmoddi4+0x2c6>
 8000928:	1a84      	subs	r4, r0, r2
 800092a:	eb61 0303 	sbc.w	r3, r1, r3
 800092e:	2001      	movs	r0, #1
 8000930:	469e      	mov	lr, r3
 8000932:	2d00      	cmp	r5, #0
 8000934:	d0e0      	beq.n	80008f8 <__udivmoddi4+0xa4>
 8000936:	e9c5 4e00 	strd	r4, lr, [r5]
 800093a:	e7dd      	b.n	80008f8 <__udivmoddi4+0xa4>
 800093c:	b902      	cbnz	r2, 8000940 <__udivmoddi4+0xec>
 800093e:	deff      	udf	#255	; 0xff
 8000940:	fab2 f282 	clz	r2, r2
 8000944:	2a00      	cmp	r2, #0
 8000946:	f040 8092 	bne.w	8000a6e <__udivmoddi4+0x21a>
 800094a:	eba1 010c 	sub.w	r1, r1, ip
 800094e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000952:	fa1f fe8c 	uxth.w	lr, ip
 8000956:	2601      	movs	r6, #1
 8000958:	0c20      	lsrs	r0, r4, #16
 800095a:	fbb1 f3f7 	udiv	r3, r1, r7
 800095e:	fb07 1113 	mls	r1, r7, r3, r1
 8000962:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000966:	fb0e f003 	mul.w	r0, lr, r3
 800096a:	4288      	cmp	r0, r1
 800096c:	d908      	bls.n	8000980 <__udivmoddi4+0x12c>
 800096e:	eb1c 0101 	adds.w	r1, ip, r1
 8000972:	f103 38ff 	add.w	r8, r3, #4294967295
 8000976:	d202      	bcs.n	800097e <__udivmoddi4+0x12a>
 8000978:	4288      	cmp	r0, r1
 800097a:	f200 80cb 	bhi.w	8000b14 <__udivmoddi4+0x2c0>
 800097e:	4643      	mov	r3, r8
 8000980:	1a09      	subs	r1, r1, r0
 8000982:	b2a4      	uxth	r4, r4
 8000984:	fbb1 f0f7 	udiv	r0, r1, r7
 8000988:	fb07 1110 	mls	r1, r7, r0, r1
 800098c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000990:	fb0e fe00 	mul.w	lr, lr, r0
 8000994:	45a6      	cmp	lr, r4
 8000996:	d908      	bls.n	80009aa <__udivmoddi4+0x156>
 8000998:	eb1c 0404 	adds.w	r4, ip, r4
 800099c:	f100 31ff 	add.w	r1, r0, #4294967295
 80009a0:	d202      	bcs.n	80009a8 <__udivmoddi4+0x154>
 80009a2:	45a6      	cmp	lr, r4
 80009a4:	f200 80bb 	bhi.w	8000b1e <__udivmoddi4+0x2ca>
 80009a8:	4608      	mov	r0, r1
 80009aa:	eba4 040e 	sub.w	r4, r4, lr
 80009ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009b2:	e79c      	b.n	80008ee <__udivmoddi4+0x9a>
 80009b4:	f1c6 0720 	rsb	r7, r6, #32
 80009b8:	40b3      	lsls	r3, r6
 80009ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80009be:	ea4c 0c03 	orr.w	ip, ip, r3
 80009c2:	fa20 f407 	lsr.w	r4, r0, r7
 80009c6:	fa01 f306 	lsl.w	r3, r1, r6
 80009ca:	431c      	orrs	r4, r3
 80009cc:	40f9      	lsrs	r1, r7
 80009ce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009d2:	fa00 f306 	lsl.w	r3, r0, r6
 80009d6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009da:	0c20      	lsrs	r0, r4, #16
 80009dc:	fa1f fe8c 	uxth.w	lr, ip
 80009e0:	fb09 1118 	mls	r1, r9, r8, r1
 80009e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009e8:	fb08 f00e 	mul.w	r0, r8, lr
 80009ec:	4288      	cmp	r0, r1
 80009ee:	fa02 f206 	lsl.w	r2, r2, r6
 80009f2:	d90b      	bls.n	8000a0c <__udivmoddi4+0x1b8>
 80009f4:	eb1c 0101 	adds.w	r1, ip, r1
 80009f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009fc:	f080 8088 	bcs.w	8000b10 <__udivmoddi4+0x2bc>
 8000a00:	4288      	cmp	r0, r1
 8000a02:	f240 8085 	bls.w	8000b10 <__udivmoddi4+0x2bc>
 8000a06:	f1a8 0802 	sub.w	r8, r8, #2
 8000a0a:	4461      	add	r1, ip
 8000a0c:	1a09      	subs	r1, r1, r0
 8000a0e:	b2a4      	uxth	r4, r4
 8000a10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a14:	fb09 1110 	mls	r1, r9, r0, r1
 8000a18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a20:	458e      	cmp	lr, r1
 8000a22:	d908      	bls.n	8000a36 <__udivmoddi4+0x1e2>
 8000a24:	eb1c 0101 	adds.w	r1, ip, r1
 8000a28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a2c:	d26c      	bcs.n	8000b08 <__udivmoddi4+0x2b4>
 8000a2e:	458e      	cmp	lr, r1
 8000a30:	d96a      	bls.n	8000b08 <__udivmoddi4+0x2b4>
 8000a32:	3802      	subs	r0, #2
 8000a34:	4461      	add	r1, ip
 8000a36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a3e:	eba1 010e 	sub.w	r1, r1, lr
 8000a42:	42a1      	cmp	r1, r4
 8000a44:	46c8      	mov	r8, r9
 8000a46:	46a6      	mov	lr, r4
 8000a48:	d356      	bcc.n	8000af8 <__udivmoddi4+0x2a4>
 8000a4a:	d053      	beq.n	8000af4 <__udivmoddi4+0x2a0>
 8000a4c:	b15d      	cbz	r5, 8000a66 <__udivmoddi4+0x212>
 8000a4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a52:	eb61 010e 	sbc.w	r1, r1, lr
 8000a56:	fa01 f707 	lsl.w	r7, r1, r7
 8000a5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a5e:	40f1      	lsrs	r1, r6
 8000a60:	431f      	orrs	r7, r3
 8000a62:	e9c5 7100 	strd	r7, r1, [r5]
 8000a66:	2600      	movs	r6, #0
 8000a68:	4631      	mov	r1, r6
 8000a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6e:	f1c2 0320 	rsb	r3, r2, #32
 8000a72:	40d8      	lsrs	r0, r3
 8000a74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a78:	fa21 f303 	lsr.w	r3, r1, r3
 8000a7c:	4091      	lsls	r1, r2
 8000a7e:	4301      	orrs	r1, r0
 8000a80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a84:	fa1f fe8c 	uxth.w	lr, ip
 8000a88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000a90:	0c0b      	lsrs	r3, r1, #16
 8000a92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a96:	fb00 f60e 	mul.w	r6, r0, lr
 8000a9a:	429e      	cmp	r6, r3
 8000a9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x260>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aaa:	d22f      	bcs.n	8000b0c <__udivmoddi4+0x2b8>
 8000aac:	429e      	cmp	r6, r3
 8000aae:	d92d      	bls.n	8000b0c <__udivmoddi4+0x2b8>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	1b9b      	subs	r3, r3, r6
 8000ab6:	b289      	uxth	r1, r1
 8000ab8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000abc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ac0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ac8:	428b      	cmp	r3, r1
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x28a>
 8000acc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ad0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ad4:	d216      	bcs.n	8000b04 <__udivmoddi4+0x2b0>
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d914      	bls.n	8000b04 <__udivmoddi4+0x2b0>
 8000ada:	3e02      	subs	r6, #2
 8000adc:	4461      	add	r1, ip
 8000ade:	1ac9      	subs	r1, r1, r3
 8000ae0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ae4:	e738      	b.n	8000958 <__udivmoddi4+0x104>
 8000ae6:	462e      	mov	r6, r5
 8000ae8:	4628      	mov	r0, r5
 8000aea:	e705      	b.n	80008f8 <__udivmoddi4+0xa4>
 8000aec:	4606      	mov	r6, r0
 8000aee:	e6e3      	b.n	80008b8 <__udivmoddi4+0x64>
 8000af0:	4618      	mov	r0, r3
 8000af2:	e6f8      	b.n	80008e6 <__udivmoddi4+0x92>
 8000af4:	454b      	cmp	r3, r9
 8000af6:	d2a9      	bcs.n	8000a4c <__udivmoddi4+0x1f8>
 8000af8:	ebb9 0802 	subs.w	r8, r9, r2
 8000afc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b00:	3801      	subs	r0, #1
 8000b02:	e7a3      	b.n	8000a4c <__udivmoddi4+0x1f8>
 8000b04:	4646      	mov	r6, r8
 8000b06:	e7ea      	b.n	8000ade <__udivmoddi4+0x28a>
 8000b08:	4620      	mov	r0, r4
 8000b0a:	e794      	b.n	8000a36 <__udivmoddi4+0x1e2>
 8000b0c:	4640      	mov	r0, r8
 8000b0e:	e7d1      	b.n	8000ab4 <__udivmoddi4+0x260>
 8000b10:	46d0      	mov	r8, sl
 8000b12:	e77b      	b.n	8000a0c <__udivmoddi4+0x1b8>
 8000b14:	3b02      	subs	r3, #2
 8000b16:	4461      	add	r1, ip
 8000b18:	e732      	b.n	8000980 <__udivmoddi4+0x12c>
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	e709      	b.n	8000932 <__udivmoddi4+0xde>
 8000b1e:	4464      	add	r4, ip
 8000b20:	3802      	subs	r0, #2
 8000b22:	e742      	b.n	80009aa <__udivmoddi4+0x156>

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b2e:	463b      	mov	r3, r7
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b3a:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <MX_ADC1_Init+0x98>)
 8000b3c:	4a21      	ldr	r2, [pc, #132]	; (8000bc4 <MX_ADC1_Init+0x9c>)
 8000b3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b40:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <MX_ADC1_Init+0x98>)
 8000b42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b48:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <MX_ADC1_Init+0x98>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <MX_ADC1_Init+0x98>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b54:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <MX_ADC1_Init+0x98>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <MX_ADC1_Init+0x98>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <MX_ADC1_Init+0x98>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b68:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <MX_ADC1_Init+0x98>)
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <MX_ADC1_Init+0xa0>)
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_ADC1_Init+0x98>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <MX_ADC1_Init+0x98>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_ADC1_Init+0x98>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_ADC1_Init+0x98>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <MX_ADC1_Init+0x98>)
 8000b8a:	f001 fb8f 	bl	80022ac <HAL_ADC_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b94:	f000 fe36 	bl	8001804 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_ADC1_Init+0x98>)
 8000baa:	f001 fd2b 	bl	8002604 <HAL_ADC_ConfigChannel>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bb4:	f000 fe26 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000028 	.word	0x20000028
 8000bc4:	40012000 	.word	0x40012000
 8000bc8:	0f000001 	.word	0x0f000001

08000bcc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a2f      	ldr	r2, [pc, #188]	; (8000ca8 <HAL_ADC_MspInit+0xdc>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d157      	bne.n	8000c9e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <HAL_ADC_MspInit+0xe0>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	4a2d      	ldr	r2, [pc, #180]	; (8000cac <HAL_ADC_MspInit+0xe0>)
 8000bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <HAL_ADC_MspInit+0xe0>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b27      	ldr	r3, [pc, #156]	; (8000cac <HAL_ADC_MspInit+0xe0>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a26      	ldr	r2, [pc, #152]	; (8000cac <HAL_ADC_MspInit+0xe0>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b24      	ldr	r3, [pc, #144]	; (8000cac <HAL_ADC_MspInit+0xe0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c26:	2304      	movs	r3, #4
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	481d      	ldr	r0, [pc, #116]	; (8000cb0 <HAL_ADC_MspInit+0xe4>)
 8000c3a:	f003 fc11 	bl	8004460 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c40:	4a1d      	ldr	r2, [pc, #116]	; (8000cb8 <HAL_ADC_MspInit+0xec>)
 8000c42:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c50:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c5c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c64:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c74:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c82:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c84:	f003 f80c 	bl	8003ca0 <HAL_DMA_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000c8e:	f000 fdb9 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c96:	639a      	str	r2, [r3, #56]	; 0x38
 8000c98:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40012000 	.word	0x40012000
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	20000070 	.word	0x20000070
 8000cb8:	40026410 	.word	0x40026410

08000cbc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <MX_CAN1_Init+0x64>)
 8000cc2:	4a18      	ldr	r2, [pc, #96]	; (8000d24 <MX_CAN1_Init+0x68>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <MX_CAN1_Init+0x64>)
 8000cc8:	2208      	movs	r2, #8
 8000cca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_CAN1_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <MX_CAN1_Init+0x64>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <MX_CAN1_Init+0x64>)
 8000cda:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cde:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <MX_CAN1_Init+0x64>)
 8000ce2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ce6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <MX_CAN1_Init+0x64>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <MX_CAN1_Init+0x64>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <MX_CAN1_Init+0x64>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_CAN1_Init+0x64>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <MX_CAN1_Init+0x64>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <MX_CAN1_Init+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_CAN1_Init+0x64>)
 8000d0e:	f001 ff29 	bl	8002b64 <HAL_CAN_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000d18:	f000 fd74 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200000d0 	.word	0x200000d0
 8000d24:	40006400 	.word	0x40006400

08000d28 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a25      	ldr	r2, [pc, #148]	; (8000ddc <HAL_CAN_MspInit+0xb4>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d144      	bne.n	8000dd4 <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <HAL_CAN_MspInit+0xb8>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a23      	ldr	r2, [pc, #140]	; (8000de0 <HAL_CAN_MspInit+0xb8>)
 8000d54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <HAL_CAN_MspInit+0xb8>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <HAL_CAN_MspInit+0xb8>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <HAL_CAN_MspInit+0xb8>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <HAL_CAN_MspInit+0xb8>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN1;
 8000d94:	2308      	movs	r3, #8
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4811      	ldr	r0, [pc, #68]	; (8000de4 <HAL_CAN_MspInit+0xbc>)
 8000da0:	f003 fb5e 	bl	8004460 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	2013      	movs	r0, #19
 8000daa:	f002 fe5a 	bl	8003a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000dae:	2013      	movs	r0, #19
 8000db0:	f002 fe73 	bl	8003a9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2100      	movs	r1, #0
 8000db8:	2014      	movs	r0, #20
 8000dba:	f002 fe52 	bl	8003a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000dbe:	2014      	movs	r0, #20
 8000dc0:	f002 fe6b 	bl	8003a9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2015      	movs	r0, #21
 8000dca:	f002 fe4a 	bl	8003a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000dce:	2015      	movs	r0, #21
 8000dd0:	f002 fe63 	bl	8003a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	; 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40006400 	.word	0x40006400
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020400 	.word	0x40020400

08000de8 <CAN_Filter_defunc>:
uint16_t Motor_RPM_PM100dx=0;
uint8_t SOC_100 = 0;
//uint32_t count=0;

void CAN_Filter_defunc(CAN_FilterTypeDef* filter)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	filter->FilterActivation = CAN_FILTER_ENABLE; // filter on,off
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2201      	movs	r2, #1
 8000df4:	621a      	str	r2, [r3, #32]
	filter->FilterBank = 1; // filterbank initialize single can = 0~13, dual can = 0~27
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	615a      	str	r2, [r3, #20]
	filter->FilterFIFOAssignment = CAN_FILTER_FIFO0; // fifo assgin 0 or 1
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
	filter->FilterIdHigh = 0x0000; //
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
	filter->FilterIdLow = 0x0000;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	605a      	str	r2, [r3, #4]
	filter->FilterMaskIdHigh = 0x0000;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
	filter->FilterMaskIdLow = 0x0000;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
	filter->FilterMode = CAN_FILTERMODE_IDMASK; // filter mode -> mask or list
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
	filter->FilterScale = CAN_FILTERSCALE_16BIT; // filter scale
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
	// filtername.SlaveStartFilterBank // only dual can

	HAL_CAN_ConfigFilter(&hcan1, filter);
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	4803      	ldr	r0, [pc, #12]	; (8000e38 <CAN_Filter_defunc+0x50>)
 8000e2a:	f001 ff97 	bl	8002d5c <HAL_CAN_ConfigFilter>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200000d0 	.word	0x200000d0

08000e3c <CAN_TX_Header_defunc>:

void CAN_TX_Header_defunc(CAN_TxHeaderTypeDef* TX_Header, uint32_t ID)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
	TX_Header->DLC = 8;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2208      	movs	r2, #8
 8000e4a:	611a      	str	r2, [r3, #16]
	TX_Header->IDE = CAN_ID_STD;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
	TX_Header->RTR = CAN_RTR_DATA;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
	TX_Header->TransmitGlobalTime = DISABLE;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	751a      	strb	r2, [r3, #20]
	TX_Header->StdId = ID;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	601a      	str	r2, [r3, #0]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <CAN_Error_Handler>:

void CAN_Error_Handler(CAN_HandleTypeDef* hcan, CAN_FilterTypeDef* filter)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
	if (HAL_CAN_ConfigFilter(hcan, filter) != HAL_OK)
 8000e7a:	6839      	ldr	r1, [r7, #0]
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f001 ff6d 	bl	8002d5c <HAL_CAN_ConfigFilter>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <CAN_Error_Handler+0x1c>
	{
		// Filter configuration Error
		Error_Handler();
 8000e88:	f000 fcbc 	bl	8001804 <Error_Handler>
	}

	// Can Start
	if (HAL_CAN_Start(hcan) != HAL_OK)
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f002 f851 	bl	8002f34 <HAL_CAN_Start>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <CAN_Error_Handler+0x2c>
	{
		// Start Error
		Error_Handler();
 8000e98:	f000 fcb4 	bl	8001804 <Error_Handler>
	}

	// Activate CAN RX notification
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f002 faae 	bl	8003400 <HAL_CAN_ActivateNotification>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <CAN_Error_Handler+0x3e>
	{
		// Notification Error
		Error_Handler();
 8000eaa:	f000 fcab 	bl	8001804 <Error_Handler>
	}
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <Transmit_CAN>:

void Transmit_CAN(CAN_HandleTypeDef* hcan, CAN_TxHeaderTypeDef* TX_Header, uint8_t data[], uint32_t *pTxMailbox)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	603b      	str	r3, [r7, #0]
	if (HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f002 f953 	bl	8003172 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00a      	beq.n	8000ee8 <Transmit_CAN+0x30>
	{
		HAL_CAN_AddTxMessage(hcan, TX_Header, data, pTxMailbox);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f002 f86f 	bl	8002fbc <HAL_CAN_AddTxMessage>
		txcount++;
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <Transmit_CAN+0x38>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	4a02      	ldr	r2, [pc, #8]	; (8000ef0 <Transmit_CAN+0x38>)
 8000ee6:	6013      	str	r3, [r2, #0]
	}
}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	2000011c 	.word	0x2000011c

08000ef4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	rxcount++;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000f04:	6013      	str	r3, [r2, #0]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN_RXH, RXData) != HAL_OK)
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000f08:	4a19      	ldr	r2, [pc, #100]	; (8000f70 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f002 f965 	bl	80031dc <HAL_CAN_GetRxMessage>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
    {
      Error_Handler();
 8000f18:	f000 fc74 	bl	8001804 <Error_Handler>
    }

				switch(CAN_RXH.StdId)
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b09      	cmp	r3, #9
 8000f22:	d017      	beq.n	8000f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
 8000f24:	2ba5      	cmp	r3, #165	; 0xa5
 8000f26:	d11a      	bne.n	8000f5e <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
				{
								case 0xa5: // pm100dx rpm
								 for(int i = 0;i<8;i++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	e00e      	b.n	8000f4c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
									 Motor_RPM_PM100dx =RXData[3]<<8 | RXData[2];
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000f30:	78db      	ldrb	r3, [r3, #3]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	b21a      	sxth	r2, r3
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000f38:	789b      	ldrb	r3, [r3, #2]
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	b21b      	sxth	r3, r3
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000f44:	801a      	strh	r2, [r3, #0]
								 for(int i = 0;i<8;i++)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b07      	cmp	r3, #7
 8000f50:	dded      	ble.n	8000f2e <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
								break;
 8000f52:	e004      	b.n	8000f5e <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>

								case 0x09: // soc_100_dash
									SOC_100 = RXData[0];
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000f56:	781a      	ldrb	r2, [r3, #0]
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000f5a:	701a      	strb	r2, [r3, #0]
									break;
 8000f5c:	bf00      	nop
				}
	}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000120 	.word	0x20000120
 8000f6c:	20000114 	.word	0x20000114
 8000f70:	200000f8 	.word	0x200000f8
 8000f74:	20000124 	.word	0x20000124
 8000f78:	20000126 	.word	0x20000126

08000f7c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f82:	463b      	mov	r3, r7
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_DAC_Init+0x60>)
 8000f8c:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <MX_DAC_Init+0x64>)
 8000f8e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f90:	4812      	ldr	r0, [pc, #72]	; (8000fdc <MX_DAC_Init+0x60>)
 8000f92:	f002 fd9c 	bl	8003ace <HAL_DAC_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f9c:	f000 fc32 	bl	8001804 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	2200      	movs	r2, #0
 8000fac:	4619      	mov	r1, r3
 8000fae:	480b      	ldr	r0, [pc, #44]	; (8000fdc <MX_DAC_Init+0x60>)
 8000fb0:	f002 fe26 	bl	8003c00 <HAL_DAC_ConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000fba:	f000 fc23 	bl	8001804 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2210      	movs	r2, #16
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_DAC_Init+0x60>)
 8000fc6:	f002 fe1b 	bl	8003c00 <HAL_DAC_ConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000fd0:	f000 fc18 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000128 	.word	0x20000128
 8000fe0:	40007400 	.word	0x40007400

08000fe4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a17      	ldr	r2, [pc, #92]	; (8001060 <HAL_DAC_MspInit+0x7c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d127      	bne.n	8001056 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_DAC_MspInit+0x80>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a15      	ldr	r2, [pc, #84]	; (8001064 <HAL_DAC_MspInit+0x80>)
 8001010:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <HAL_DAC_MspInit+0x80>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <HAL_DAC_MspInit+0x80>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <HAL_DAC_MspInit+0x80>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_DAC_MspInit+0x80>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800103e:	2330      	movs	r3, #48	; 0x30
 8001040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001042:	2303      	movs	r3, #3
 8001044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <HAL_DAC_MspInit+0x84>)
 8001052:	f003 fa05 	bl	8004460 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	; 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40007400 	.word	0x40007400
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000

0800106c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b23      	ldr	r3, [pc, #140]	; (8001104 <MX_DMA_Init+0x98>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a22      	ldr	r2, [pc, #136]	; (8001104 <MX_DMA_Init+0x98>)
 800107c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b20      	ldr	r3, [pc, #128]	; (8001104 <MX_DMA_Init+0x98>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <MX_DMA_Init+0x98>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a1b      	ldr	r2, [pc, #108]	; (8001104 <MX_DMA_Init+0x98>)
 8001098:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <MX_DMA_Init+0x98>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	200b      	movs	r0, #11
 80010b0:	f002 fcd7 	bl	8003a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010b4:	200b      	movs	r0, #11
 80010b6:	f002 fcf0 	bl	8003a9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2010      	movs	r0, #16
 80010c0:	f002 fccf 	bl	8003a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010c4:	2010      	movs	r0, #16
 80010c6:	f002 fce8 	bl	8003a9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	202f      	movs	r0, #47	; 0x2f
 80010d0:	f002 fcc7 	bl	8003a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80010d4:	202f      	movs	r0, #47	; 0x2f
 80010d6:	f002 fce0 	bl	8003a9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	2038      	movs	r0, #56	; 0x38
 80010e0:	f002 fcbf 	bl	8003a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010e4:	2038      	movs	r0, #56	; 0x38
 80010e6:	f002 fcd8 	bl	8003a9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	2045      	movs	r0, #69	; 0x45
 80010f0:	f002 fcb7 	bl	8003a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80010f4:	2045      	movs	r0, #69	; 0x45
 80010f6:	f002 fcd0 	bl	8003a9a <HAL_NVIC_EnableIRQ>

}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800

08001108 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MX_GPIO_Init+0x84>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a1d      	ldr	r2, [pc, #116]	; (800118c <MX_GPIO_Init+0x84>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <MX_GPIO_Init+0x84>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <MX_GPIO_Init+0x84>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a16      	ldr	r2, [pc, #88]	; (800118c <MX_GPIO_Init+0x84>)
 8001134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <MX_GPIO_Init+0x84>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_GPIO_Init+0x84>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a0f      	ldr	r2, [pc, #60]	; (800118c <MX_GPIO_Init+0x84>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <MX_GPIO_Init+0x84>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_GPIO_Init+0x84>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a08      	ldr	r2, [pc, #32]	; (800118c <MX_GPIO_Init+0x84>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_GPIO_Init+0x84>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]

}
 800117e:	bf00      	nop
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001196:	f001 f817 	bl	80021c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119a:	f000 f8af 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119e:	f7ff ffb3 	bl	8001108 <MX_GPIO_Init>
  MX_DMA_Init();
 80011a2:	f7ff ff63 	bl	800106c <MX_DMA_Init>
  MX_CAN1_Init();
 80011a6:	f7ff fd89 	bl	8000cbc <MX_CAN1_Init>
  MX_TIM2_Init();
 80011aa:	f000 fc85 	bl	8001ab8 <MX_TIM2_Init>
  MX_ADC1_Init();
 80011ae:	f7ff fcbb 	bl	8000b28 <MX_ADC1_Init>
  MX_TIM4_Init();
 80011b2:	f000 fd63 	bl	8001c7c <MX_TIM4_Init>
  MX_DAC_Init();
 80011b6:	f7ff fee1 	bl	8000f7c <MX_DAC_Init>
  MX_TIM3_Init();
 80011ba:	f000 fced 	bl	8001b98 <MX_TIM3_Init>
  MX_TIM1_Init();
 80011be:	f000 fc23 	bl	8001a08 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)capture1, 2);
 80011c2:	2302      	movs	r3, #2
 80011c4:	4a38      	ldr	r2, [pc, #224]	; (80012a8 <main+0x118>)
 80011c6:	2108      	movs	r1, #8
 80011c8:	4838      	ldr	r0, [pc, #224]	; (80012ac <main+0x11c>)
 80011ca:	f003 ffab 	bl	8005124 <HAL_TIM_IC_Start_DMA>
  //htim3.State = HAL_TIM_STATE_READY;
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, (uint32_t *)capture2, 2);
 80011ce:	2302      	movs	r3, #2
 80011d0:	4a37      	ldr	r2, [pc, #220]	; (80012b0 <main+0x120>)
 80011d2:	210c      	movs	r1, #12
 80011d4:	4837      	ldr	r0, [pc, #220]	; (80012b4 <main+0x124>)
 80011d6:	f003 ffa5 	bl	8005124 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_2, (uint32_t *)capture3, 2);
 80011da:	2302      	movs	r3, #2
 80011dc:	4a36      	ldr	r2, [pc, #216]	; (80012b8 <main+0x128>)
 80011de:	2104      	movs	r1, #4
 80011e0:	4836      	ldr	r0, [pc, #216]	; (80012bc <main+0x12c>)
 80011e2:	f003 ff9f 	bl	8005124 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t *)capture4, 2);
 80011e6:	2302      	movs	r3, #2
 80011e8:	4a35      	ldr	r2, [pc, #212]	; (80012c0 <main+0x130>)
 80011ea:	2100      	movs	r1, #0
 80011ec:	4835      	ldr	r0, [pc, #212]	; (80012c4 <main+0x134>)
 80011ee:	f003 ff99 	bl	8005124 <HAL_TIM_IC_Start_DMA>
  CAN_Filter_defunc(&filtername);
 80011f2:	4835      	ldr	r0, [pc, #212]	; (80012c8 <main+0x138>)
 80011f4:	f7ff fdf8 	bl	8000de8 <CAN_Filter_defunc>
  CAN_TX_Header_defunc(&TXH_RPM, 0x1b0);
 80011f8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80011fc:	4833      	ldr	r0, [pc, #204]	; (80012cc <main+0x13c>)
 80011fe:	f7ff fe1d 	bl	8000e3c <CAN_TX_Header_defunc>
  CAN_TX_Header_defunc(&TXH_Brake, 0x1b1);
 8001202:	f240 11b1 	movw	r1, #433	; 0x1b1
 8001206:	4832      	ldr	r0, [pc, #200]	; (80012d0 <main+0x140>)
 8001208:	f7ff fe18 	bl	8000e3c <CAN_TX_Header_defunc>
  CAN_Error_Handler(&hcan1, &filtername);
 800120c:	492e      	ldr	r1, [pc, #184]	; (80012c8 <main+0x138>)
 800120e:	4831      	ldr	r0, [pc, #196]	; (80012d4 <main+0x144>)
 8001210:	f7ff fe2e 	bl	8000e70 <CAN_Error_Handler>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1); // speed (km/h)
 8001214:	2100      	movs	r1, #0
 8001216:	4830      	ldr	r0, [pc, #192]	; (80012d8 <main+0x148>)
 8001218:	f002 fc7b 	bl	8003b12 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2); // SOC
 800121c:	2110      	movs	r1, #16
 800121e:	482e      	ldr	r0, [pc, #184]	; (80012d8 <main+0x148>)
 8001220:	f002 fc77 	bl	8003b12 <HAL_DAC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Measure(&Front_R, &Front_L, &Rear_R, &Rear_L, TXData_Brake);
 8001224:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <main+0x14c>)
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <main+0x150>)
 800122a:	4a2e      	ldr	r2, [pc, #184]	; (80012e4 <main+0x154>)
 800122c:	492e      	ldr	r1, [pc, #184]	; (80012e8 <main+0x158>)
 800122e:	482f      	ldr	r0, [pc, #188]	; (80012ec <main+0x15c>)
 8001230:	f000 f8ce 	bl	80013d0 <Measure>
	  KPH_velocity = Motor_RPM_PM100dx*0.01924685;
 8001234:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <main+0x160>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fa69 	bl	8000710 <__aeabi_i2d>
 800123e:	a318      	add	r3, pc, #96	; (adr r3, 80012a0 <main+0x110>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7fe ffe8 	bl	8000218 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff fac8 	bl	80007e4 <__aeabi_d2uiz>
 8001254:	4603      	mov	r3, r0
 8001256:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <main+0x164>)
 8001258:	6013      	str	r3, [r2, #0]
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, map(KPH_velocity, 0, 120, 0, 4095));
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <main+0x164>)
 800125c:	6818      	ldr	r0, [r3, #0]
 800125e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	2278      	movs	r2, #120	; 0x78
 8001268:	2100      	movs	r1, #0
 800126a:	f000 fa73 	bl	8001754 <map>
 800126e:	4603      	mov	r3, r0
 8001270:	2200      	movs	r2, #0
 8001272:	2100      	movs	r1, #0
 8001274:	4818      	ldr	r0, [pc, #96]	; (80012d8 <main+0x148>)
 8001276:	f002 fc9e 	bl	8003bb6 <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, map(SOC_100, 0, 100, 0, 4095));
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <main+0x168>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2300      	movs	r3, #0
 8001288:	2264      	movs	r2, #100	; 0x64
 800128a:	2100      	movs	r1, #0
 800128c:	f000 fa62 	bl	8001754 <map>
 8001290:	4603      	mov	r3, r0
 8001292:	2200      	movs	r2, #0
 8001294:	2110      	movs	r1, #16
 8001296:	4810      	ldr	r0, [pc, #64]	; (80012d8 <main+0x148>)
 8001298:	f002 fc8d 	bl	8003bb6 <HAL_DAC_SetValue>
	  Measure(&Front_R, &Front_L, &Rear_R, &Rear_L, TXData_Brake);
 800129c:	e7c2      	b.n	8001224 <main+0x94>
 800129e:	bf00      	nop
 80012a0:	3d343df5 	.word	0x3d343df5
 80012a4:	3f93b572 	.word	0x3f93b572
 80012a8:	2000013c 	.word	0x2000013c
 80012ac:	20000218 	.word	0x20000218
 80012b0:	20000140 	.word	0x20000140
 80012b4:	20000260 	.word	0x20000260
 80012b8:	20000144 	.word	0x20000144
 80012bc:	200002a8 	.word	0x200002a8
 80012c0:	20000148 	.word	0x20000148
 80012c4:	200002f0 	.word	0x200002f0
 80012c8:	200001ec 	.word	0x200001ec
 80012cc:	200001bc 	.word	0x200001bc
 80012d0:	200001d4 	.word	0x200001d4
 80012d4:	200000d0 	.word	0x200000d0
 80012d8:	20000128 	.word	0x20000128
 80012dc:	200001b4 	.word	0x200001b4
 80012e0:	20000164 	.word	0x20000164
 80012e4:	2000018c 	.word	0x2000018c
 80012e8:	20000150 	.word	0x20000150
 80012ec:	20000178 	.word	0x20000178
 80012f0:	20000124 	.word	0x20000124
 80012f4:	200001a0 	.word	0x200001a0
 80012f8:	20000126 	.word	0x20000126

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b094      	sub	sp, #80	; 0x50
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	2234      	movs	r2, #52	; 0x34
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f004 ff7a 	bl	8006204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <SystemClock_Config+0xcc>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	4a27      	ldr	r2, [pc, #156]	; (80013c8 <SystemClock_Config+0xcc>)
 800132a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132e:	6413      	str	r3, [r2, #64]	; 0x40
 8001330:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <SystemClock_Config+0xcc>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800133c:	2300      	movs	r3, #0
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <SystemClock_Config+0xd0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a21      	ldr	r2, [pc, #132]	; (80013cc <SystemClock_Config+0xd0>)
 8001346:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <SystemClock_Config+0xd0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001358:	2302      	movs	r3, #2
 800135a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800135c:	2301      	movs	r3, #1
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001360:	2310      	movs	r3, #16
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001364:	2302      	movs	r3, #2
 8001366:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001368:	2300      	movs	r3, #0
 800136a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800136c:	2308      	movs	r3, #8
 800136e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001370:	2350      	movs	r3, #80	; 0x50
 8001372:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001374:	2302      	movs	r3, #2
 8001376:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001378:	2302      	movs	r3, #2
 800137a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800137c:	2302      	movs	r3, #2
 800137e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4618      	mov	r0, r3
 8001386:	f003 fbab 	bl	8004ae0 <HAL_RCC_OscConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001390:	f000 fa38 	bl	8001804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001394:	230f      	movs	r3, #15
 8001396:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001398:	2302      	movs	r3, #2
 800139a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	2103      	movs	r1, #3
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 f9e9 	bl	8004788 <HAL_RCC_ClockConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013bc:	f000 fa22 	bl	8001804 <Error_Handler>
  }
}
 80013c0:	bf00      	nop
 80013c2:	3750      	adds	r7, #80	; 0x50
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40007000 	.word	0x40007000

080013d0 <Measure>:

/* USER CODE BEGIN 4 */
void Measure(RPM_Variable *Front_R_Wheel, RPM_Variable *Front_L_Wheel, RPM_Variable *Rear_R_Wheel, RPM_Variable *Rear_L_Wheel, uint8_t TXData[8])
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	603b      	str	r3, [r7, #0]
	Brake_Pressure(TXData);
 80013de:	69b8      	ldr	r0, [r7, #24]
 80013e0:	f000 f80c 	bl	80013fc <Brake_Pressure>
	Calc_RPM(Front_R_Wheel, Front_L_Wheel, Rear_R_Wheel, Rear_L_Wheel, TXData);
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f000 f824 	bl	800143c <Calc_RPM>
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <Brake_Pressure>:

void Brake_Pressure(uint8_t TXData[8])
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, ADC_Value, 1);
 8001404:	2201      	movs	r2, #1
 8001406:	490b      	ldr	r1, [pc, #44]	; (8001434 <Brake_Pressure+0x38>)
 8001408:	480b      	ldr	r0, [pc, #44]	; (8001438 <Brake_Pressure+0x3c>)
 800140a:	f000 ff93 	bl	8002334 <HAL_ADC_Start_DMA>
	//pressure =  map(ADC_Value[0], 410, 3724, 0, 1600);
	TXData[0] = (uint8_t)ADC_Value[0];
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <Brake_Pressure+0x38>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	701a      	strb	r2, [r3, #0]
	TXData[1] = (uint8_t)(ADC_Value[0] >> 8);
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <Brake_Pressure+0x38>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	0a1a      	lsrs	r2, r3, #8
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3301      	adds	r3, #1
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Stop_DMA(&hadc1);
 8001426:	4804      	ldr	r0, [pc, #16]	; (8001438 <Brake_Pressure+0x3c>)
 8001428:	f001 f874 	bl	8002514 <HAL_ADC_Stop_DMA>

}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2000014c 	.word	0x2000014c
 8001438:	20000028 	.word	0x20000028

0800143c <Calc_RPM>:

void Calc_RPM(RPM_Variable *Front_R_Wheel, RPM_Variable *Front_L_Wheel, RPM_Variable *Rear_R_Wheel, RPM_Variable *Rear_L_Wheel, uint8_t TXData[8])
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	603b      	str	r3, [r7, #0]
	if(Front_R_Wheel->done)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d044      	beq.n	80014dc <Calc_RPM+0xa0>
	{
		if(capture1[0] > capture1[1])
 8001452:	4b93      	ldr	r3, [pc, #588]	; (80016a0 <Calc_RPM+0x264>)
 8001454:	881a      	ldrh	r2, [r3, #0]
 8001456:	4b92      	ldr	r3, [pc, #584]	; (80016a0 <Calc_RPM+0x264>)
 8001458:	885b      	ldrh	r3, [r3, #2]
 800145a:	429a      	cmp	r2, r3
 800145c:	d90b      	bls.n	8001476 <Calc_RPM+0x3a>
		{
			Front_R_Wheel->period = htim1.Instance->ARR + capture1[1] - capture1[0];
 800145e:	4b91      	ldr	r3, [pc, #580]	; (80016a4 <Calc_RPM+0x268>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	4a8e      	ldr	r2, [pc, #568]	; (80016a0 <Calc_RPM+0x264>)
 8001466:	8852      	ldrh	r2, [r2, #2]
 8001468:	4413      	add	r3, r2
 800146a:	4a8d      	ldr	r2, [pc, #564]	; (80016a0 <Calc_RPM+0x264>)
 800146c:	8812      	ldrh	r2, [r2, #0]
 800146e:	1a9a      	subs	r2, r3, r2
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	e008      	b.n	8001488 <Calc_RPM+0x4c>
		}
		else
		{
			Front_R_Wheel->period = capture1[1] - capture1[0];
 8001476:	4b8a      	ldr	r3, [pc, #552]	; (80016a0 <Calc_RPM+0x264>)
 8001478:	885b      	ldrh	r3, [r3, #2]
 800147a:	461a      	mov	r2, r3
 800147c:	4b88      	ldr	r3, [pc, #544]	; (80016a0 <Calc_RPM+0x264>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	60da      	str	r2, [r3, #12]
		}
		Front_R_Wheel->freq = htim1.Instance->ARR / Front_R_Wheel->period;
 8001488:	4b86      	ldr	r3, [pc, #536]	; (80016a4 <Calc_RPM+0x268>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	fbb2 f3f3 	udiv	r3, r2, r3
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	edc3 7a02 	vstr	s15, [r3, #8]
		Front_R_Wheel->RPM = (uint32_t)(15 * Front_R_Wheel->freq);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80014aa:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80014ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014b6:	ee17 2a90 	vmov	r2, s15
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	601a      	str	r2, [r3, #0]
		Front_R_Wheel->done = false;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
		TXData_RPM[0] = (uint8_t)Front_R_Wheel->RPM;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4b77      	ldr	r3, [pc, #476]	; (80016a8 <Calc_RPM+0x26c>)
 80014cc:	701a      	strb	r2, [r3, #0]
		TXData_RPM[1] = (uint8_t)Front_R_Wheel->RPM >> 8;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	121b      	asrs	r3, r3, #8
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b73      	ldr	r3, [pc, #460]	; (80016a8 <Calc_RPM+0x26c>)
 80014da:	705a      	strb	r2, [r3, #1]
	}

	if(Front_L_Wheel->done)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d044      	beq.n	800156e <Calc_RPM+0x132>
	{
		if(capture2[0] > capture2[1])
 80014e4:	4b71      	ldr	r3, [pc, #452]	; (80016ac <Calc_RPM+0x270>)
 80014e6:	881a      	ldrh	r2, [r3, #0]
 80014e8:	4b70      	ldr	r3, [pc, #448]	; (80016ac <Calc_RPM+0x270>)
 80014ea:	885b      	ldrh	r3, [r3, #2]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d90b      	bls.n	8001508 <Calc_RPM+0xcc>
		{
			Front_L_Wheel->period = htim2.Instance->ARR + capture2[1] - capture2[0];
 80014f0:	4b6f      	ldr	r3, [pc, #444]	; (80016b0 <Calc_RPM+0x274>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	4a6d      	ldr	r2, [pc, #436]	; (80016ac <Calc_RPM+0x270>)
 80014f8:	8852      	ldrh	r2, [r2, #2]
 80014fa:	4413      	add	r3, r2
 80014fc:	4a6b      	ldr	r2, [pc, #428]	; (80016ac <Calc_RPM+0x270>)
 80014fe:	8812      	ldrh	r2, [r2, #0]
 8001500:	1a9a      	subs	r2, r3, r2
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	e008      	b.n	800151a <Calc_RPM+0xde>
		}
		else
		{
			Front_L_Wheel->period = capture2[1] - capture2[0];
 8001508:	4b68      	ldr	r3, [pc, #416]	; (80016ac <Calc_RPM+0x270>)
 800150a:	885b      	ldrh	r3, [r3, #2]
 800150c:	461a      	mov	r2, r3
 800150e:	4b67      	ldr	r3, [pc, #412]	; (80016ac <Calc_RPM+0x270>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	461a      	mov	r2, r3
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	60da      	str	r2, [r3, #12]
		}
		Front_L_Wheel->freq = htim2.Instance->ARR / Front_L_Wheel->period;
 800151a:	4b65      	ldr	r3, [pc, #404]	; (80016b0 <Calc_RPM+0x274>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	fbb2 f3f3 	udiv	r3, r2, r3
 8001528:	ee07 3a90 	vmov	s15, r3
 800152c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	edc3 7a02 	vstr	s15, [r3, #8]
		Front_L_Wheel->RPM = (uint32_t)(15 * Front_L_Wheel->freq);
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	edd3 7a02 	vldr	s15, [r3, #8]
 800153c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001540:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001548:	ee17 2a90 	vmov	r2, s15
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	601a      	str	r2, [r3, #0]
		Front_L_Wheel->done = false;
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
		TXData_RPM[2] = (uint8_t)Front_L_Wheel->RPM;
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	4b52      	ldr	r3, [pc, #328]	; (80016a8 <Calc_RPM+0x26c>)
 800155e:	709a      	strb	r2, [r3, #2]
		TXData_RPM[3] = (uint8_t)Front_L_Wheel->RPM >> 8;
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	121b      	asrs	r3, r3, #8
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4b4f      	ldr	r3, [pc, #316]	; (80016a8 <Calc_RPM+0x26c>)
 800156c:	70da      	strb	r2, [r3, #3]
	}

	if(Rear_R_Wheel->done)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d044      	beq.n	8001600 <Calc_RPM+0x1c4>
		{
			if(capture3[0] > capture3[1])
 8001576:	4b4f      	ldr	r3, [pc, #316]	; (80016b4 <Calc_RPM+0x278>)
 8001578:	881a      	ldrh	r2, [r3, #0]
 800157a:	4b4e      	ldr	r3, [pc, #312]	; (80016b4 <Calc_RPM+0x278>)
 800157c:	885b      	ldrh	r3, [r3, #2]
 800157e:	429a      	cmp	r2, r3
 8001580:	d90b      	bls.n	800159a <Calc_RPM+0x15e>
			{
				Rear_R_Wheel->period = htim3.Instance->ARR + capture3[1] - capture3[0];
 8001582:	4b4d      	ldr	r3, [pc, #308]	; (80016b8 <Calc_RPM+0x27c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	4a4a      	ldr	r2, [pc, #296]	; (80016b4 <Calc_RPM+0x278>)
 800158a:	8852      	ldrh	r2, [r2, #2]
 800158c:	4413      	add	r3, r2
 800158e:	4a49      	ldr	r2, [pc, #292]	; (80016b4 <Calc_RPM+0x278>)
 8001590:	8812      	ldrh	r2, [r2, #0]
 8001592:	1a9a      	subs	r2, r3, r2
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	e008      	b.n	80015ac <Calc_RPM+0x170>
			}
			else
			{
				Rear_R_Wheel->period = capture3[1] - capture3[0];
 800159a:	4b46      	ldr	r3, [pc, #280]	; (80016b4 <Calc_RPM+0x278>)
 800159c:	885b      	ldrh	r3, [r3, #2]
 800159e:	461a      	mov	r2, r3
 80015a0:	4b44      	ldr	r3, [pc, #272]	; (80016b4 <Calc_RPM+0x278>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	60da      	str	r2, [r3, #12]
			}
			Rear_R_Wheel->freq = htim3.Instance->ARR / Rear_R_Wheel->period;
 80015ac:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <Calc_RPM+0x27c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	edc3 7a02 	vstr	s15, [r3, #8]
			Rear_R_Wheel->RPM = (uint32_t)(15 * Rear_R_Wheel->freq);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ce:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80015d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015da:	ee17 2a90 	vmov	r2, s15
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	601a      	str	r2, [r3, #0]
			Rear_R_Wheel->done = false;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
			TXData_RPM[4] = (uint8_t)Rear_R_Wheel->RPM;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <Calc_RPM+0x26c>)
 80015f0:	711a      	strb	r2, [r3, #4]
			TXData_RPM[5] = (uint8_t)Rear_R_Wheel->RPM >> 8;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	121b      	asrs	r3, r3, #8
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <Calc_RPM+0x26c>)
 80015fe:	715a      	strb	r2, [r3, #5]
		}

	if(Rear_L_Wheel->done)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d044      	beq.n	8001692 <Calc_RPM+0x256>
		{
			if(capture4[0] > capture4[1])
 8001608:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <Calc_RPM+0x280>)
 800160a:	881a      	ldrh	r2, [r3, #0]
 800160c:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <Calc_RPM+0x280>)
 800160e:	885b      	ldrh	r3, [r3, #2]
 8001610:	429a      	cmp	r2, r3
 8001612:	d90b      	bls.n	800162c <Calc_RPM+0x1f0>
			{
				Rear_L_Wheel->period = htim4.Instance->ARR + capture4[1] - capture4[0];
 8001614:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <Calc_RPM+0x284>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	4a28      	ldr	r2, [pc, #160]	; (80016bc <Calc_RPM+0x280>)
 800161c:	8852      	ldrh	r2, [r2, #2]
 800161e:	4413      	add	r3, r2
 8001620:	4a26      	ldr	r2, [pc, #152]	; (80016bc <Calc_RPM+0x280>)
 8001622:	8812      	ldrh	r2, [r2, #0]
 8001624:	1a9a      	subs	r2, r3, r2
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	e008      	b.n	800163e <Calc_RPM+0x202>
			}
			else
			{
				Rear_L_Wheel->period = capture4[1] - capture4[0];
 800162c:	4b23      	ldr	r3, [pc, #140]	; (80016bc <Calc_RPM+0x280>)
 800162e:	885b      	ldrh	r3, [r3, #2]
 8001630:	461a      	mov	r2, r3
 8001632:	4b22      	ldr	r3, [pc, #136]	; (80016bc <Calc_RPM+0x280>)
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	461a      	mov	r2, r3
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	60da      	str	r2, [r3, #12]
			}
			Rear_L_Wheel->freq = htim4.Instance->ARR / Rear_L_Wheel->period;
 800163e:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <Calc_RPM+0x284>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	fbb2 f3f3 	udiv	r3, r2, r3
 800164c:	ee07 3a90 	vmov	s15, r3
 8001650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	edc3 7a02 	vstr	s15, [r3, #8]
			Rear_L_Wheel->RPM = (uint32_t)(15 * Rear_L_Wheel->freq);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001660:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800166c:	ee17 2a90 	vmov	r2, s15
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	601a      	str	r2, [r3, #0]
			Rear_L_Wheel->done = false;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
			TXData_RPM[6] = (uint8_t)Rear_L_Wheel->RPM;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <Calc_RPM+0x26c>)
 8001682:	719a      	strb	r2, [r3, #6]
			TXData_RPM[7] = (uint8_t)Rear_L_Wheel->RPM >> 8;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	121b      	asrs	r3, r3, #8
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <Calc_RPM+0x26c>)
 8001690:	71da      	strb	r2, [r3, #7]
		}
}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	2000013c 	.word	0x2000013c
 80016a4:	20000218 	.word	0x20000218
 80016a8:	200001ac 	.word	0x200001ac
 80016ac:	20000140 	.word	0x20000140
 80016b0:	20000260 	.word	0x20000260
 80016b4:	20000144 	.word	0x20000144
 80016b8:	200002a8 	.word	0x200002a8
 80016bc:	20000148 	.word	0x20000148
 80016c0:	200002f0 	.word	0x200002f0

080016c4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a19      	ldr	r2, [pc, #100]	; (8001738 <HAL_TIM_IC_CaptureCallback+0x74>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d106      	bne.n	80016e4 <HAL_TIM_IC_CaptureCallback+0x20>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7f1b      	ldrb	r3, [r3, #28]
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d102      	bne.n	80016e4 <HAL_TIM_IC_CaptureCallback+0x20>
	{
		Front_R.done = true;
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <HAL_TIM_IC_CaptureCallback+0x78>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	611a      	str	r2, [r3, #16]
	}
	if(htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ec:	d106      	bne.n	80016fc <HAL_TIM_IC_CaptureCallback+0x38>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	7f1b      	ldrb	r3, [r3, #28]
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d102      	bne.n	80016fc <HAL_TIM_IC_CaptureCallback+0x38>
	{
		Front_L.done = true;
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	611a      	str	r2, [r3, #16]
	}
	if(htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a10      	ldr	r2, [pc, #64]	; (8001744 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d106      	bne.n	8001714 <HAL_TIM_IC_CaptureCallback+0x50>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7f1b      	ldrb	r3, [r3, #28]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d102      	bne.n	8001714 <HAL_TIM_IC_CaptureCallback+0x50>
	{
		Rear_R.done = true;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001710:	2201      	movs	r2, #1
 8001712:	611a      	str	r2, [r3, #16]
	}
	if(htim->Instance == TIM4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0c      	ldr	r2, [pc, #48]	; (800174c <HAL_TIM_IC_CaptureCallback+0x88>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d106      	bne.n	800172c <HAL_TIM_IC_CaptureCallback+0x68>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7f1b      	ldrb	r3, [r3, #28]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d102      	bne.n	800172c <HAL_TIM_IC_CaptureCallback+0x68>
	{
		Rear_L.done = true;
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001728:	2201      	movs	r2, #1
 800172a:	611a      	str	r2, [r3, #16]
	}
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	40010000 	.word	0x40010000
 800173c:	20000178 	.word	0x20000178
 8001740:	20000150 	.word	0x20000150
 8001744:	40000400 	.word	0x40000400
 8001748:	2000018c 	.word	0x2000018c
 800174c:	40000800 	.word	0x40000800
 8001750:	20000164 	.word	0x20000164

08001754 <map>:


uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max) {
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	69b9      	ldr	r1, [r7, #24]
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	1a8a      	subs	r2, r1, r2
 800176e:	fb03 f202 	mul.w	r2, r3, r2
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	1acb      	subs	r3, r1, r3
 8001778:	fbb2 f2f3 	udiv	r2, r2, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	4413      	add	r3, r2
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <callbackSystick>:

void callbackSystick() //1ms count
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	static int count = 0;
	count++;
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <callbackSystick+0x58>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <callbackSystick+0x58>)
 8001798:	6013      	str	r3, [r2, #0]
	if (count == 5)  //10ms send can tx message
 800179a:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <callbackSystick+0x58>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d11d      	bne.n	80017de <callbackSystick+0x52>
	{
		if(tx_flag == brake)
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <callbackSystick+0x5c>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <callbackSystick+0x32>
		{
			Transmit_CAN(&hcan1, &TXH_Brake, TXData_Brake, &mailbox);
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <callbackSystick+0x60>)
 80017ac:	4a10      	ldr	r2, [pc, #64]	; (80017f0 <callbackSystick+0x64>)
 80017ae:	4911      	ldr	r1, [pc, #68]	; (80017f4 <callbackSystick+0x68>)
 80017b0:	4811      	ldr	r0, [pc, #68]	; (80017f8 <callbackSystick+0x6c>)
 80017b2:	f7ff fb81 	bl	8000eb8 <Transmit_CAN>
			tx_flag = RPM;
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <callbackSystick+0x5c>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]
 80017bc:	e00c      	b.n	80017d8 <callbackSystick+0x4c>
		}
		else if(tx_flag == RPM)
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <callbackSystick+0x5c>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d108      	bne.n	80017d8 <callbackSystick+0x4c>
		{
			Transmit_CAN(&hcan1, &TXH_RPM, TXData_RPM, &mailbox);
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <callbackSystick+0x60>)
 80017c8:	4a0c      	ldr	r2, [pc, #48]	; (80017fc <callbackSystick+0x70>)
 80017ca:	490d      	ldr	r1, [pc, #52]	; (8001800 <callbackSystick+0x74>)
 80017cc:	480a      	ldr	r0, [pc, #40]	; (80017f8 <callbackSystick+0x6c>)
 80017ce:	f7ff fb73 	bl	8000eb8 <Transmit_CAN>
			tx_flag = brake;
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <callbackSystick+0x5c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
		}
		count = 0;
 80017d8:	4b02      	ldr	r3, [pc, #8]	; (80017e4 <callbackSystick+0x58>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
	}
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000214 	.word	0x20000214
 80017e8:	200001a8 	.word	0x200001a8
 80017ec:	200001a4 	.word	0x200001a4
 80017f0:	200001b4 	.word	0x200001b4
 80017f4:	200001d4 	.word	0x200001d4
 80017f8:	200000d0 	.word	0x200000d0
 80017fc:	200001ac 	.word	0x200001ac
 8001800:	200001bc 	.word	0x200001bc

08001804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001808:	b672      	cpsid	i
}
 800180a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800180c:	e7fe      	b.n	800180c <Error_Handler+0x8>
	...

08001810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_MspInit+0x4c>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	4a0f      	ldr	r2, [pc, #60]	; (800185c <HAL_MspInit+0x4c>)
 8001820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001824:	6453      	str	r3, [r2, #68]	; 0x44
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_MspInit+0x4c>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_MspInit+0x4c>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <HAL_MspInit+0x4c>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_MspInit+0x4c>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800

08001860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <NMI_Handler+0x4>

08001866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186a:	e7fe      	b.n	800186a <HardFault_Handler+0x4>

0800186c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <MemManage_Handler+0x4>

08001872 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <BusFault_Handler+0x4>

08001878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <UsageFault_Handler+0x4>

0800187e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	callbackSystick();
 80018ac:	f7ff ff6e 	bl	800178c <callbackSystick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b0:	f000 fcdc 	bl	800226c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <DMA1_Stream0_IRQHandler+0x10>)
 80018be:	f002 fb65 	bl	8003f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000458 	.word	0x20000458

080018cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <DMA1_Stream5_IRQHandler+0x10>)
 80018d2:	f002 fb5b 	bl	8003f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200003f8 	.word	0x200003f8

080018e0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <CAN1_TX_IRQHandler+0x10>)
 80018e6:	f001 fdb1 	bl	800344c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200000d0 	.word	0x200000d0

080018f4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <CAN1_RX0_IRQHandler+0x10>)
 80018fa:	f001 fda7 	bl	800344c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200000d0 	.word	0x200000d0

08001908 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <CAN1_RX1_IRQHandler+0x10>)
 800190e:	f001 fd9d 	bl	800344c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200000d0 	.word	0x200000d0

0800191c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001922:	f003 fda9 	bl	8005478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000218 	.word	0x20000218

08001930 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001936:	f003 fd9f 	bl	8005478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000218 	.word	0x20000218

08001944 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800194a:	f003 fd95 	bl	8005478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000218 	.word	0x20000218

08001958 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <TIM1_CC_IRQHandler+0x10>)
 800195e:	f003 fd8b 	bl	8005478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000218 	.word	0x20000218

0800196c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <TIM2_IRQHandler+0x10>)
 8001972:	f003 fd81 	bl	8005478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000260 	.word	0x20000260

08001980 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <TIM3_IRQHandler+0x10>)
 8001986:	f003 fd77 	bl	8005478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200002a8 	.word	0x200002a8

08001994 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <TIM4_IRQHandler+0x10>)
 800199a:	f003 fd6d 	bl	8005478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200002f0 	.word	0x200002f0

080019a8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch4);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <DMA1_Stream7_IRQHandler+0x10>)
 80019ae:	f002 faed 	bl	8003f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000398 	.word	0x20000398

080019bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <DMA2_Stream0_IRQHandler+0x10>)
 80019c2:	f002 fae3 	bl	8003f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000070 	.word	0x20000070

080019d0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <DMA2_Stream6_IRQHandler+0x10>)
 80019d6:	f002 fad9 	bl	8003f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000338 	.word	0x20000338

080019e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <SystemInit+0x20>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <SystemInit+0x20>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim3_ch2;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a18:	463b      	mov	r3, r7
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <MX_TIM1_Init+0xa8>)
 8001a26:	4a23      	ldr	r2, [pc, #140]	; (8001ab4 <MX_TIM1_Init+0xac>)
 8001a28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1999;
 8001a2a:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <MX_TIM1_Init+0xa8>)
 8001a2c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001a30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a32:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <MX_TIM1_Init+0xa8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <MX_TIM1_Init+0xa8>)
 8001a3a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001a3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <MX_TIM1_Init+0xa8>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <MX_TIM1_Init+0xa8>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <MX_TIM1_Init+0xa8>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001a52:	4817      	ldr	r0, [pc, #92]	; (8001ab0 <MX_TIM1_Init+0xa8>)
 8001a54:	f003 fb17 	bl	8005086 <HAL_TIM_IC_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001a5e:	f7ff fed1 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480f      	ldr	r0, [pc, #60]	; (8001ab0 <MX_TIM1_Init+0xa8>)
 8001a72:	f004 fb13 	bl	800609c <HAL_TIMEx_MasterConfigSynchronization>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001a7c:	f7ff fec2 	bl	8001804 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a80:	2300      	movs	r3, #0
 8001a82:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a84:	2301      	movs	r3, #1
 8001a86:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001a8c:	230f      	movs	r3, #15
 8001a8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001a90:	463b      	mov	r3, r7
 8001a92:	2208      	movs	r2, #8
 8001a94:	4619      	mov	r1, r3
 8001a96:	4806      	ldr	r0, [pc, #24]	; (8001ab0 <MX_TIM1_Init+0xa8>)
 8001a98:	f003 fdf6 	bl	8005688 <HAL_TIM_IC_ConfigChannel>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001aa2:	f7ff feaf 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000218 	.word	0x20000218
 8001ab4:	40010000 	.word	0x40010000

08001ab8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001abe:	f107 0318 	add.w	r3, r7, #24
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ad6:	463b      	mov	r3, r7
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ae2:	4b2c      	ldr	r3, [pc, #176]	; (8001b94 <MX_TIM2_Init+0xdc>)
 8001ae4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ae8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1999;
 8001aea:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <MX_TIM2_Init+0xdc>)
 8001aec:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001af0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af2:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <MX_TIM2_Init+0xdc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8001af8:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <MX_TIM2_Init+0xdc>)
 8001afa:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001afe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b00:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <MX_TIM2_Init+0xdc>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b06:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <MX_TIM2_Init+0xdc>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b0c:	4821      	ldr	r0, [pc, #132]	; (8001b94 <MX_TIM2_Init+0xdc>)
 8001b0e:	f003 fa6b 	bl	8004fe8 <HAL_TIM_Base_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001b18:	f7ff fe74 	bl	8001804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b20:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b22:	f107 0318 	add.w	r3, r7, #24
 8001b26:	4619      	mov	r1, r3
 8001b28:	481a      	ldr	r0, [pc, #104]	; (8001b94 <MX_TIM2_Init+0xdc>)
 8001b2a:	f003 fe49 	bl	80057c0 <HAL_TIM_ConfigClockSource>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001b34:	f7ff fe66 	bl	8001804 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b38:	4816      	ldr	r0, [pc, #88]	; (8001b94 <MX_TIM2_Init+0xdc>)
 8001b3a:	f003 faa4 	bl	8005086 <HAL_TIM_IC_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001b44:	f7ff fe5e 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b50:	f107 0310 	add.w	r3, r7, #16
 8001b54:	4619      	mov	r1, r3
 8001b56:	480f      	ldr	r0, [pc, #60]	; (8001b94 <MX_TIM2_Init+0xdc>)
 8001b58:	f004 faa0 	bl	800609c <HAL_TIMEx_MasterConfigSynchronization>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001b62:	f7ff fe4f 	bl	8001804 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b66:	2300      	movs	r3, #0
 8001b68:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001b72:	230f      	movs	r3, #15
 8001b74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001b76:	463b      	mov	r3, r7
 8001b78:	220c      	movs	r2, #12
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4805      	ldr	r0, [pc, #20]	; (8001b94 <MX_TIM2_Init+0xdc>)
 8001b7e:	f003 fd83 	bl	8005688 <HAL_TIM_IC_ConfigChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001b88:	f7ff fe3c 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	3728      	adds	r7, #40	; 0x28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000260 	.word	0x20000260

08001b98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9e:	f107 0318 	add.w	r3, r7, #24
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bac:	f107 0310 	add.w	r3, r7, #16
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bc2:	4b2c      	ldr	r3, [pc, #176]	; (8001c74 <MX_TIM3_Init+0xdc>)
 8001bc4:	4a2c      	ldr	r2, [pc, #176]	; (8001c78 <MX_TIM3_Init+0xe0>)
 8001bc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1999;
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <MX_TIM3_Init+0xdc>)
 8001bca:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001bce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd0:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <MX_TIM3_Init+0xdc>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 8001bd6:	4b27      	ldr	r3, [pc, #156]	; (8001c74 <MX_TIM3_Init+0xdc>)
 8001bd8:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001bdc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bde:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <MX_TIM3_Init+0xdc>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be4:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <MX_TIM3_Init+0xdc>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bea:	4822      	ldr	r0, [pc, #136]	; (8001c74 <MX_TIM3_Init+0xdc>)
 8001bec:	f003 f9fc 	bl	8004fe8 <HAL_TIM_Base_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8001bf6:	f7ff fe05 	bl	8001804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bfe:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c00:	f107 0318 	add.w	r3, r7, #24
 8001c04:	4619      	mov	r1, r3
 8001c06:	481b      	ldr	r0, [pc, #108]	; (8001c74 <MX_TIM3_Init+0xdc>)
 8001c08:	f003 fdda 	bl	80057c0 <HAL_TIM_ConfigClockSource>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c12:	f7ff fdf7 	bl	8001804 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001c16:	4817      	ldr	r0, [pc, #92]	; (8001c74 <MX_TIM3_Init+0xdc>)
 8001c18:	f003 fa35 	bl	8005086 <HAL_TIM_IC_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001c22:	f7ff fdef 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c2e:	f107 0310 	add.w	r3, r7, #16
 8001c32:	4619      	mov	r1, r3
 8001c34:	480f      	ldr	r0, [pc, #60]	; (8001c74 <MX_TIM3_Init+0xdc>)
 8001c36:	f004 fa31 	bl	800609c <HAL_TIMEx_MasterConfigSynchronization>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001c40:	f7ff fde0 	bl	8001804 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c44:	2300      	movs	r3, #0
 8001c46:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001c50:	230f      	movs	r3, #15
 8001c52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c54:	463b      	mov	r3, r7
 8001c56:	2204      	movs	r2, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4806      	ldr	r0, [pc, #24]	; (8001c74 <MX_TIM3_Init+0xdc>)
 8001c5c:	f003 fd14 	bl	8005688 <HAL_TIM_IC_ConfigChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8001c66:	f7ff fdcd 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	3728      	adds	r7, #40	; 0x28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200002a8 	.word	0x200002a8
 8001c78:	40000400 	.word	0x40000400

08001c7c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c82:	f107 0318 	add.w	r3, r7, #24
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ca6:	4b2c      	ldr	r3, [pc, #176]	; (8001d58 <MX_TIM4_Init+0xdc>)
 8001ca8:	4a2c      	ldr	r2, [pc, #176]	; (8001d5c <MX_TIM4_Init+0xe0>)
 8001caa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1999;
 8001cac:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <MX_TIM4_Init+0xdc>)
 8001cae:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001cb2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb4:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <MX_TIM4_Init+0xdc>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 39999;
 8001cba:	4b27      	ldr	r3, [pc, #156]	; (8001d58 <MX_TIM4_Init+0xdc>)
 8001cbc:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001cc0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc2:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <MX_TIM4_Init+0xdc>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc8:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <MX_TIM4_Init+0xdc>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cce:	4822      	ldr	r0, [pc, #136]	; (8001d58 <MX_TIM4_Init+0xdc>)
 8001cd0:	f003 f98a 	bl	8004fe8 <HAL_TIM_Base_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001cda:	f7ff fd93 	bl	8001804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ce4:	f107 0318 	add.w	r3, r7, #24
 8001ce8:	4619      	mov	r1, r3
 8001cea:	481b      	ldr	r0, [pc, #108]	; (8001d58 <MX_TIM4_Init+0xdc>)
 8001cec:	f003 fd68 	bl	80057c0 <HAL_TIM_ConfigClockSource>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001cf6:	f7ff fd85 	bl	8001804 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001cfa:	4817      	ldr	r0, [pc, #92]	; (8001d58 <MX_TIM4_Init+0xdc>)
 8001cfc:	f003 f9c3 	bl	8005086 <HAL_TIM_IC_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001d06:	f7ff fd7d 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d12:	f107 0310 	add.w	r3, r7, #16
 8001d16:	4619      	mov	r1, r3
 8001d18:	480f      	ldr	r0, [pc, #60]	; (8001d58 <MX_TIM4_Init+0xdc>)
 8001d1a:	f004 f9bf 	bl	800609c <HAL_TIMEx_MasterConfigSynchronization>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001d24:	f7ff fd6e 	bl	8001804 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d38:	463b      	mov	r3, r7
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4806      	ldr	r0, [pc, #24]	; (8001d58 <MX_TIM4_Init+0xdc>)
 8001d40:	f003 fca2 	bl	8005688 <HAL_TIM_IC_ConfigChannel>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8001d4a:	f7ff fd5b 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	3728      	adds	r7, #40	; 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200002f0 	.word	0x200002f0
 8001d5c:	40000800 	.word	0x40000800

08001d60 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a42      	ldr	r2, [pc, #264]	; (8001e88 <HAL_TIM_IC_MspInit+0x128>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d17d      	bne.n	8001e7e <HAL_TIM_IC_MspInit+0x11e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	4b41      	ldr	r3, [pc, #260]	; (8001e8c <HAL_TIM_IC_MspInit+0x12c>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	4a40      	ldr	r2, [pc, #256]	; (8001e8c <HAL_TIM_IC_MspInit+0x12c>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6453      	str	r3, [r2, #68]	; 0x44
 8001d92:	4b3e      	ldr	r3, [pc, #248]	; (8001e8c <HAL_TIM_IC_MspInit+0x12c>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b3a      	ldr	r3, [pc, #232]	; (8001e8c <HAL_TIM_IC_MspInit+0x12c>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a39      	ldr	r2, [pc, #228]	; (8001e8c <HAL_TIM_IC_MspInit+0x12c>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <HAL_TIM_IC_MspInit+0x12c>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	482e      	ldr	r0, [pc, #184]	; (8001e90 <HAL_TIM_IC_MspInit+0x130>)
 8001dd8:	f002 fb42 	bl	8004460 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 8001ddc:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <HAL_TIM_IC_MspInit+0x134>)
 8001dde:	4a2e      	ldr	r2, [pc, #184]	; (8001e98 <HAL_TIM_IC_MspInit+0x138>)
 8001de0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 8001de2:	4b2c      	ldr	r3, [pc, #176]	; (8001e94 <HAL_TIM_IC_MspInit+0x134>)
 8001de4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001de8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dea:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <HAL_TIM_IC_MspInit+0x134>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df0:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <HAL_TIM_IC_MspInit+0x134>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001df6:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <HAL_TIM_IC_MspInit+0x134>)
 8001df8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dfc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <HAL_TIM_IC_MspInit+0x134>)
 8001e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e04:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e06:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <HAL_TIM_IC_MspInit+0x134>)
 8001e08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e0c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 8001e0e:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <HAL_TIM_IC_MspInit+0x134>)
 8001e10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e14:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001e16:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <HAL_TIM_IC_MspInit+0x134>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_TIM_IC_MspInit+0x134>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8001e22:	481c      	ldr	r0, [pc, #112]	; (8001e94 <HAL_TIM_IC_MspInit+0x134>)
 8001e24:	f001 ff3c 	bl	8003ca0 <HAL_DMA_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_TIM_IC_MspInit+0xd2>
    {
      Error_Handler();
 8001e2e:	f7ff fce9 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <HAL_TIM_IC_MspInit+0x134>)
 8001e36:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e38:	4a16      	ldr	r2, [pc, #88]	; (8001e94 <HAL_TIM_IC_MspInit+0x134>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	2018      	movs	r0, #24
 8001e44:	f001 fe0d 	bl	8003a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001e48:	2018      	movs	r0, #24
 8001e4a:	f001 fe26 	bl	8003a9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	2019      	movs	r0, #25
 8001e54:	f001 fe05 	bl	8003a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e58:	2019      	movs	r0, #25
 8001e5a:	f001 fe1e 	bl	8003a9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	201a      	movs	r0, #26
 8001e64:	f001 fdfd 	bl	8003a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001e68:	201a      	movs	r0, #26
 8001e6a:	f001 fe16 	bl	8003a9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	201b      	movs	r0, #27
 8001e74:	f001 fdf5 	bl	8003a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001e78:	201b      	movs	r0, #27
 8001e7a:	f001 fe0e 	bl	8003a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001e7e:	bf00      	nop
 8001e80:	3728      	adds	r7, #40	; 0x28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40020000 	.word	0x40020000
 8001e94:	20000338 	.word	0x20000338
 8001e98:	400264a0 	.word	0x400264a0

08001e9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08e      	sub	sp, #56	; 0x38
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ebc:	d16b      	bne.n	8001f96 <HAL_TIM_Base_MspInit+0xfa>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
 8001ec2:	4ba1      	ldr	r3, [pc, #644]	; (8002148 <HAL_TIM_Base_MspInit+0x2ac>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	4aa0      	ldr	r2, [pc, #640]	; (8002148 <HAL_TIM_Base_MspInit+0x2ac>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ece:	4b9e      	ldr	r3, [pc, #632]	; (8002148 <HAL_TIM_Base_MspInit+0x2ac>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	623b      	str	r3, [r7, #32]
 8001ed8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	4b9a      	ldr	r3, [pc, #616]	; (8002148 <HAL_TIM_Base_MspInit+0x2ac>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a99      	ldr	r2, [pc, #612]	; (8002148 <HAL_TIM_Base_MspInit+0x2ac>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b97      	ldr	r3, [pc, #604]	; (8002148 <HAL_TIM_Base_MspInit+0x2ac>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	61fb      	str	r3, [r7, #28]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ef6:	2308      	movs	r3, #8
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f06:	2301      	movs	r3, #1
 8001f08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0e:	4619      	mov	r1, r3
 8001f10:	488e      	ldr	r0, [pc, #568]	; (800214c <HAL_TIM_Base_MspInit+0x2b0>)
 8001f12:	f002 faa5 	bl	8004460 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_UP_CH4 Init */
    hdma_tim2_up_ch4.Instance = DMA1_Stream7;
 8001f16:	4b8e      	ldr	r3, [pc, #568]	; (8002150 <HAL_TIM_Base_MspInit+0x2b4>)
 8001f18:	4a8e      	ldr	r2, [pc, #568]	; (8002154 <HAL_TIM_Base_MspInit+0x2b8>)
 8001f1a:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch4.Init.Channel = DMA_CHANNEL_3;
 8001f1c:	4b8c      	ldr	r3, [pc, #560]	; (8002150 <HAL_TIM_Base_MspInit+0x2b4>)
 8001f1e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f22:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f24:	4b8a      	ldr	r3, [pc, #552]	; (8002150 <HAL_TIM_Base_MspInit+0x2b4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f2a:	4b89      	ldr	r3, [pc, #548]	; (8002150 <HAL_TIM_Base_MspInit+0x2b4>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001f30:	4b87      	ldr	r3, [pc, #540]	; (8002150 <HAL_TIM_Base_MspInit+0x2b4>)
 8001f32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f36:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f38:	4b85      	ldr	r3, [pc, #532]	; (8002150 <HAL_TIM_Base_MspInit+0x2b4>)
 8001f3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f3e:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f40:	4b83      	ldr	r3, [pc, #524]	; (8002150 <HAL_TIM_Base_MspInit+0x2b4>)
 8001f42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f46:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch4.Init.Mode = DMA_CIRCULAR;
 8001f48:	4b81      	ldr	r3, [pc, #516]	; (8002150 <HAL_TIM_Base_MspInit+0x2b4>)
 8001f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f4e:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001f50:	4b7f      	ldr	r3, [pc, #508]	; (8002150 <HAL_TIM_Base_MspInit+0x2b4>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f56:	4b7e      	ldr	r3, [pc, #504]	; (8002150 <HAL_TIM_Base_MspInit+0x2b4>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch4) != HAL_OK)
 8001f5c:	487c      	ldr	r0, [pc, #496]	; (8002150 <HAL_TIM_Base_MspInit+0x2b4>)
 8001f5e:	f001 fe9f 	bl	8003ca0 <HAL_DMA_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8001f68:	f7ff fc4c 	bl	8001804 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch4);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a78      	ldr	r2, [pc, #480]	; (8002150 <HAL_TIM_Base_MspInit+0x2b4>)
 8001f70:	621a      	str	r2, [r3, #32]
 8001f72:	4a77      	ldr	r2, [pc, #476]	; (8002150 <HAL_TIM_Base_MspInit+0x2b4>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_up_ch4);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a75      	ldr	r2, [pc, #468]	; (8002150 <HAL_TIM_Base_MspInit+0x2b4>)
 8001f7c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f7e:	4a74      	ldr	r2, [pc, #464]	; (8002150 <HAL_TIM_Base_MspInit+0x2b4>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2100      	movs	r1, #0
 8001f88:	201c      	movs	r0, #28
 8001f8a:	f001 fd6a 	bl	8003a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f8e:	201c      	movs	r0, #28
 8001f90:	f001 fd83 	bl	8003a9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001f94:	e0d4      	b.n	8002140 <HAL_TIM_Base_MspInit+0x2a4>
  else if(tim_baseHandle->Instance==TIM3)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a6f      	ldr	r2, [pc, #444]	; (8002158 <HAL_TIM_Base_MspInit+0x2bc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d165      	bne.n	800206c <HAL_TIM_Base_MspInit+0x1d0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61bb      	str	r3, [r7, #24]
 8001fa4:	4b68      	ldr	r3, [pc, #416]	; (8002148 <HAL_TIM_Base_MspInit+0x2ac>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	4a67      	ldr	r2, [pc, #412]	; (8002148 <HAL_TIM_Base_MspInit+0x2ac>)
 8001faa:	f043 0302 	orr.w	r3, r3, #2
 8001fae:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb0:	4b65      	ldr	r3, [pc, #404]	; (8002148 <HAL_TIM_Base_MspInit+0x2ac>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]
 8001fba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	4b61      	ldr	r3, [pc, #388]	; (8002148 <HAL_TIM_Base_MspInit+0x2ac>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	4a60      	ldr	r2, [pc, #384]	; (8002148 <HAL_TIM_Base_MspInit+0x2ac>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6313      	str	r3, [r2, #48]	; 0x30
 8001fcc:	4b5e      	ldr	r3, [pc, #376]	; (8002148 <HAL_TIM_Base_MspInit+0x2ac>)
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4856      	ldr	r0, [pc, #344]	; (800214c <HAL_TIM_Base_MspInit+0x2b0>)
 8001ff4:	f002 fa34 	bl	8004460 <HAL_GPIO_Init>
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 8001ff8:	4b58      	ldr	r3, [pc, #352]	; (800215c <HAL_TIM_Base_MspInit+0x2c0>)
 8001ffa:	4a59      	ldr	r2, [pc, #356]	; (8002160 <HAL_TIM_Base_MspInit+0x2c4>)
 8001ffc:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8001ffe:	4b57      	ldr	r3, [pc, #348]	; (800215c <HAL_TIM_Base_MspInit+0x2c0>)
 8002000:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002004:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002006:	4b55      	ldr	r3, [pc, #340]	; (800215c <HAL_TIM_Base_MspInit+0x2c0>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800200c:	4b53      	ldr	r3, [pc, #332]	; (800215c <HAL_TIM_Base_MspInit+0x2c0>)
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002012:	4b52      	ldr	r3, [pc, #328]	; (800215c <HAL_TIM_Base_MspInit+0x2c0>)
 8002014:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002018:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800201a:	4b50      	ldr	r3, [pc, #320]	; (800215c <HAL_TIM_Base_MspInit+0x2c0>)
 800201c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002020:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002022:	4b4e      	ldr	r3, [pc, #312]	; (800215c <HAL_TIM_Base_MspInit+0x2c0>)
 8002024:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002028:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 800202a:	4b4c      	ldr	r3, [pc, #304]	; (800215c <HAL_TIM_Base_MspInit+0x2c0>)
 800202c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002030:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002032:	4b4a      	ldr	r3, [pc, #296]	; (800215c <HAL_TIM_Base_MspInit+0x2c0>)
 8002034:	2200      	movs	r2, #0
 8002036:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002038:	4b48      	ldr	r3, [pc, #288]	; (800215c <HAL_TIM_Base_MspInit+0x2c0>)
 800203a:	2200      	movs	r2, #0
 800203c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800203e:	4847      	ldr	r0, [pc, #284]	; (800215c <HAL_TIM_Base_MspInit+0x2c0>)
 8002040:	f001 fe2e 	bl	8003ca0 <HAL_DMA_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_TIM_Base_MspInit+0x1b2>
      Error_Handler();
 800204a:	f7ff fbdb 	bl	8001804 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a42      	ldr	r2, [pc, #264]	; (800215c <HAL_TIM_Base_MspInit+0x2c0>)
 8002052:	629a      	str	r2, [r3, #40]	; 0x28
 8002054:	4a41      	ldr	r2, [pc, #260]	; (800215c <HAL_TIM_Base_MspInit+0x2c0>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	201d      	movs	r0, #29
 8002060:	f001 fcff 	bl	8003a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002064:	201d      	movs	r0, #29
 8002066:	f001 fd18 	bl	8003a9a <HAL_NVIC_EnableIRQ>
}
 800206a:	e069      	b.n	8002140 <HAL_TIM_Base_MspInit+0x2a4>
  else if(tim_baseHandle->Instance==TIM4)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a3c      	ldr	r2, [pc, #240]	; (8002164 <HAL_TIM_Base_MspInit+0x2c8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d164      	bne.n	8002140 <HAL_TIM_Base_MspInit+0x2a4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	4b33      	ldr	r3, [pc, #204]	; (8002148 <HAL_TIM_Base_MspInit+0x2ac>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a32      	ldr	r2, [pc, #200]	; (8002148 <HAL_TIM_Base_MspInit+0x2ac>)
 8002080:	f043 0304 	orr.w	r3, r3, #4
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b30      	ldr	r3, [pc, #192]	; (8002148 <HAL_TIM_Base_MspInit+0x2ac>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <HAL_TIM_Base_MspInit+0x2ac>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a2b      	ldr	r2, [pc, #172]	; (8002148 <HAL_TIM_Base_MspInit+0x2ac>)
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b29      	ldr	r3, [pc, #164]	; (8002148 <HAL_TIM_Base_MspInit+0x2ac>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020ae:	2340      	movs	r3, #64	; 0x40
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020be:	2302      	movs	r3, #2
 80020c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c6:	4619      	mov	r1, r3
 80020c8:	4827      	ldr	r0, [pc, #156]	; (8002168 <HAL_TIM_Base_MspInit+0x2cc>)
 80020ca:	f002 f9c9 	bl	8004460 <HAL_GPIO_Init>
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 80020ce:	4b27      	ldr	r3, [pc, #156]	; (800216c <HAL_TIM_Base_MspInit+0x2d0>)
 80020d0:	4a27      	ldr	r2, [pc, #156]	; (8002170 <HAL_TIM_Base_MspInit+0x2d4>)
 80020d2:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 80020d4:	4b25      	ldr	r3, [pc, #148]	; (800216c <HAL_TIM_Base_MspInit+0x2d0>)
 80020d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020da:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020dc:	4b23      	ldr	r3, [pc, #140]	; (800216c <HAL_TIM_Base_MspInit+0x2d0>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e2:	4b22      	ldr	r3, [pc, #136]	; (800216c <HAL_TIM_Base_MspInit+0x2d0>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80020e8:	4b20      	ldr	r3, [pc, #128]	; (800216c <HAL_TIM_Base_MspInit+0x2d0>)
 80020ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ee:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020f0:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_TIM_Base_MspInit+0x2d0>)
 80020f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020f6:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020f8:	4b1c      	ldr	r3, [pc, #112]	; (800216c <HAL_TIM_Base_MspInit+0x2d0>)
 80020fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020fe:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8002100:	4b1a      	ldr	r3, [pc, #104]	; (800216c <HAL_TIM_Base_MspInit+0x2d0>)
 8002102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002106:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002108:	4b18      	ldr	r3, [pc, #96]	; (800216c <HAL_TIM_Base_MspInit+0x2d0>)
 800210a:	2200      	movs	r2, #0
 800210c:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800210e:	4b17      	ldr	r3, [pc, #92]	; (800216c <HAL_TIM_Base_MspInit+0x2d0>)
 8002110:	2200      	movs	r2, #0
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002114:	4815      	ldr	r0, [pc, #84]	; (800216c <HAL_TIM_Base_MspInit+0x2d0>)
 8002116:	f001 fdc3 	bl	8003ca0 <HAL_DMA_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_TIM_Base_MspInit+0x288>
      Error_Handler();
 8002120:	f7ff fb70 	bl	8001804 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a11      	ldr	r2, [pc, #68]	; (800216c <HAL_TIM_Base_MspInit+0x2d0>)
 8002128:	625a      	str	r2, [r3, #36]	; 0x24
 800212a:	4a10      	ldr	r2, [pc, #64]	; (800216c <HAL_TIM_Base_MspInit+0x2d0>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002130:	2200      	movs	r2, #0
 8002132:	2100      	movs	r1, #0
 8002134:	201e      	movs	r0, #30
 8002136:	f001 fc94 	bl	8003a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800213a:	201e      	movs	r0, #30
 800213c:	f001 fcad 	bl	8003a9a <HAL_NVIC_EnableIRQ>
}
 8002140:	bf00      	nop
 8002142:	3738      	adds	r7, #56	; 0x38
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40023800 	.word	0x40023800
 800214c:	40020000 	.word	0x40020000
 8002150:	20000398 	.word	0x20000398
 8002154:	400260b8 	.word	0x400260b8
 8002158:	40000400 	.word	0x40000400
 800215c:	200003f8 	.word	0x200003f8
 8002160:	40026088 	.word	0x40026088
 8002164:	40000800 	.word	0x40000800
 8002168:	40020400 	.word	0x40020400
 800216c:	20000458 	.word	0x20000458
 8002170:	40026010 	.word	0x40026010

08002174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002178:	480d      	ldr	r0, [pc, #52]	; (80021b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800217a:	490e      	ldr	r1, [pc, #56]	; (80021b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800217c:	4a0e      	ldr	r2, [pc, #56]	; (80021b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002180:	e002      	b.n	8002188 <LoopCopyDataInit>

08002182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002186:	3304      	adds	r3, #4

08002188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800218c:	d3f9      	bcc.n	8002182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218e:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002190:	4c0b      	ldr	r4, [pc, #44]	; (80021c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002194:	e001      	b.n	800219a <LoopFillZerobss>

08002196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002198:	3204      	adds	r2, #4

0800219a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800219c:	d3fb      	bcc.n	8002196 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800219e:	f7ff fc21 	bl	80019e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021a2:	f004 f80b 	bl	80061bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021a6:	f7fe fff3 	bl	8001190 <main>
  bx  lr    
 80021aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80021ac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80021b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80021b8:	08006254 	.word	0x08006254
  ldr r2, =_sbss
 80021bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80021c0:	200004bc 	.word	0x200004bc

080021c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c4:	e7fe      	b.n	80021c4 <ADC_IRQHandler>
	...

080021c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021cc:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <HAL_Init+0x40>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0d      	ldr	r2, [pc, #52]	; (8002208 <HAL_Init+0x40>)
 80021d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_Init+0x40>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <HAL_Init+0x40>)
 80021de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <HAL_Init+0x40>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a07      	ldr	r2, [pc, #28]	; (8002208 <HAL_Init+0x40>)
 80021ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f0:	2003      	movs	r0, #3
 80021f2:	f001 fc2b 	bl	8003a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021f6:	200f      	movs	r0, #15
 80021f8:	f000 f808 	bl	800220c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021fc:	f7ff fb08 	bl	8001810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023c00 	.word	0x40023c00

0800220c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_InitTick+0x54>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_InitTick+0x58>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	4619      	mov	r1, r3
 800221e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002222:	fbb3 f3f1 	udiv	r3, r3, r1
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	4618      	mov	r0, r3
 800222c:	f001 fc43 	bl	8003ab6 <HAL_SYSTICK_Config>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e00e      	b.n	8002258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b0f      	cmp	r3, #15
 800223e:	d80a      	bhi.n	8002256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002240:	2200      	movs	r2, #0
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f001 fc0b 	bl	8003a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800224c:	4a06      	ldr	r2, [pc, #24]	; (8002268 <HAL_InitTick+0x5c>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e000      	b.n	8002258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
}
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000000 	.word	0x20000000
 8002264:	20000008 	.word	0x20000008
 8002268:	20000004 	.word	0x20000004

0800226c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_IncTick+0x20>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_IncTick+0x24>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4413      	add	r3, r2
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <HAL_IncTick+0x24>)
 800227e:	6013      	str	r3, [r2, #0]
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20000008 	.word	0x20000008
 8002290:	200004b8 	.word	0x200004b8

08002294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return uwTick;
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <HAL_GetTick+0x14>)
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	200004b8 	.word	0x200004b8

080022ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e033      	b.n	800232a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7fe fc7e 	bl	8000bcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d118      	bne.n	800231c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022f2:	f023 0302 	bic.w	r3, r3, #2
 80022f6:	f043 0202 	orr.w	r2, r3, #2
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 fab2 	bl	8002868 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f023 0303 	bic.w	r3, r3, #3
 8002312:	f043 0201 	orr.w	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
 800231a:	e001      	b.n	8002320 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002328:	7bfb      	ldrb	r3, [r7, #15]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_ADC_Start_DMA+0x1e>
 800234e:	2302      	movs	r3, #2
 8002350:	e0ce      	b.n	80024f0 <HAL_ADC_Start_DMA+0x1bc>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d018      	beq.n	800239a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002378:	4b5f      	ldr	r3, [pc, #380]	; (80024f8 <HAL_ADC_Start_DMA+0x1c4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a5f      	ldr	r2, [pc, #380]	; (80024fc <HAL_ADC_Start_DMA+0x1c8>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	0c9a      	lsrs	r2, r3, #18
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800238c:	e002      	b.n	8002394 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	3b01      	subs	r3, #1
 8002392:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f9      	bne.n	800238e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a8:	d107      	bne.n	80023ba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	f040 8086 	bne.w	80024d6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d007      	beq.n	80023fc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002408:	d106      	bne.n	8002418 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f023 0206 	bic.w	r2, r3, #6
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	645a      	str	r2, [r3, #68]	; 0x44
 8002416:	e002      	b.n	800241e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002426:	4b36      	ldr	r3, [pc, #216]	; (8002500 <HAL_ADC_Start_DMA+0x1cc>)
 8002428:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	4a35      	ldr	r2, [pc, #212]	; (8002504 <HAL_ADC_Start_DMA+0x1d0>)
 8002430:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	4a34      	ldr	r2, [pc, #208]	; (8002508 <HAL_ADC_Start_DMA+0x1d4>)
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	4a33      	ldr	r2, [pc, #204]	; (800250c <HAL_ADC_Start_DMA+0x1d8>)
 8002440:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800244a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800245a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800246a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	334c      	adds	r3, #76	; 0x4c
 8002476:	4619      	mov	r1, r3
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f001 fcbe 	bl	8003dfc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 031f 	and.w	r3, r3, #31
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10f      	bne.n	80024ac <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d129      	bne.n	80024ee <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	e020      	b.n	80024ee <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a17      	ldr	r2, [pc, #92]	; (8002510 <HAL_ADC_Start_DMA+0x1dc>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d11b      	bne.n	80024ee <HAL_ADC_Start_DMA+0x1ba>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d114      	bne.n	80024ee <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	e00b      	b.n	80024ee <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f043 0210 	orr.w	r2, r3, #16
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	f043 0201 	orr.w	r2, r3, #1
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000000 	.word	0x20000000
 80024fc:	431bde83 	.word	0x431bde83
 8002500:	40012300 	.word	0x40012300
 8002504:	08002a61 	.word	0x08002a61
 8002508:	08002b1b 	.word	0x08002b1b
 800250c:	08002b37 	.word	0x08002b37
 8002510:	40012000 	.word	0x40012000

08002514 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_ADC_Stop_DMA+0x1a>
 800252a:	2302      	movs	r3, #2
 800252c:	e048      	b.n	80025c0 <HAL_ADC_Stop_DMA+0xac>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0201 	bic.w	r2, r2, #1
 8002544:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d130      	bne.n	80025b6 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002562:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d10f      	bne.n	8002592 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002576:	4618      	mov	r0, r3
 8002578:	f001 fc98 	bl	8003eac <HAL_DMA_Abort>
 800257c:	4603      	mov	r3, r0
 800257e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80025a0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025aa:	f023 0301 	bic.w	r3, r3, #1
 80025ae:	f043 0201 	orr.w	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80025be:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x1c>
 800261c:	2302      	movs	r3, #2
 800261e:	e113      	b.n	8002848 <HAL_ADC_ConfigChannel+0x244>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b09      	cmp	r3, #9
 800262e:	d925      	bls.n	800267c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68d9      	ldr	r1, [r3, #12]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	4613      	mov	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4413      	add	r3, r2
 8002644:	3b1e      	subs	r3, #30
 8002646:	2207      	movs	r2, #7
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43da      	mvns	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	400a      	ands	r2, r1
 8002654:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68d9      	ldr	r1, [r3, #12]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	4618      	mov	r0, r3
 8002668:	4603      	mov	r3, r0
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4403      	add	r3, r0
 800266e:	3b1e      	subs	r3, #30
 8002670:	409a      	lsls	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	e022      	b.n	80026c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6919      	ldr	r1, [r3, #16]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	2207      	movs	r2, #7
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43da      	mvns	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	400a      	ands	r2, r1
 800269e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6919      	ldr	r1, [r3, #16]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	4618      	mov	r0, r3
 80026b2:	4603      	mov	r3, r0
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4403      	add	r3, r0
 80026b8:	409a      	lsls	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b06      	cmp	r3, #6
 80026c8:	d824      	bhi.n	8002714 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	3b05      	subs	r3, #5
 80026dc:	221f      	movs	r2, #31
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43da      	mvns	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	400a      	ands	r2, r1
 80026ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	4618      	mov	r0, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	3b05      	subs	r3, #5
 8002706:	fa00 f203 	lsl.w	r2, r0, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	635a      	str	r2, [r3, #52]	; 0x34
 8002712:	e04c      	b.n	80027ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b0c      	cmp	r3, #12
 800271a:	d824      	bhi.n	8002766 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	3b23      	subs	r3, #35	; 0x23
 800272e:	221f      	movs	r2, #31
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43da      	mvns	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	400a      	ands	r2, r1
 800273c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	4618      	mov	r0, r3
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	3b23      	subs	r3, #35	; 0x23
 8002758:	fa00 f203 	lsl.w	r2, r0, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
 8002764:	e023      	b.n	80027ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	3b41      	subs	r3, #65	; 0x41
 8002778:	221f      	movs	r2, #31
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43da      	mvns	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	400a      	ands	r2, r1
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	4618      	mov	r0, r3
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	3b41      	subs	r3, #65	; 0x41
 80027a2:	fa00 f203 	lsl.w	r2, r0, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ae:	4b29      	ldr	r3, [pc, #164]	; (8002854 <HAL_ADC_ConfigChannel+0x250>)
 80027b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a28      	ldr	r2, [pc, #160]	; (8002858 <HAL_ADC_ConfigChannel+0x254>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d10f      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x1d8>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b12      	cmp	r3, #18
 80027c2:	d10b      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <HAL_ADC_ConfigChannel+0x254>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d12b      	bne.n	800283e <HAL_ADC_ConfigChannel+0x23a>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a1c      	ldr	r2, [pc, #112]	; (800285c <HAL_ADC_ConfigChannel+0x258>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d003      	beq.n	80027f8 <HAL_ADC_ConfigChannel+0x1f4>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b11      	cmp	r3, #17
 80027f6:	d122      	bne.n	800283e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a11      	ldr	r2, [pc, #68]	; (800285c <HAL_ADC_ConfigChannel+0x258>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d111      	bne.n	800283e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <HAL_ADC_ConfigChannel+0x25c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a11      	ldr	r2, [pc, #68]	; (8002864 <HAL_ADC_ConfigChannel+0x260>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	0c9a      	lsrs	r2, r3, #18
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002830:	e002      	b.n	8002838 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	3b01      	subs	r3, #1
 8002836:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f9      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	40012300 	.word	0x40012300
 8002858:	40012000 	.word	0x40012000
 800285c:	10000012 	.word	0x10000012
 8002860:	20000000 	.word	0x20000000
 8002864:	431bde83 	.word	0x431bde83

08002868 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002870:	4b79      	ldr	r3, [pc, #484]	; (8002a58 <ADC_Init+0x1f0>)
 8002872:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	431a      	orrs	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800289c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	021a      	lsls	r2, r3, #8
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6899      	ldr	r1, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	4a58      	ldr	r2, [pc, #352]	; (8002a5c <ADC_Init+0x1f4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d022      	beq.n	8002946 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800290e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6899      	ldr	r1, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002930:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6899      	ldr	r1, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	e00f      	b.n	8002966 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002954:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002964:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0202 	bic.w	r2, r2, #2
 8002974:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6899      	ldr	r1, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	7e1b      	ldrb	r3, [r3, #24]
 8002980:	005a      	lsls	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01b      	beq.n	80029cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6859      	ldr	r1, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	3b01      	subs	r3, #1
 80029c0:	035a      	lsls	r2, r3, #13
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	e007      	b.n	80029dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	051a      	lsls	r2, r3, #20
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6899      	ldr	r1, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a1e:	025a      	lsls	r2, r3, #9
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6899      	ldr	r1, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	029a      	lsls	r2, r3, #10
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	609a      	str	r2, [r3, #8]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	40012300 	.word	0x40012300
 8002a5c:	0f000001 	.word	0x0f000001

08002a60 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d13c      	bne.n	8002af4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d12b      	bne.n	8002aec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d127      	bne.n	8002aec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d006      	beq.n	8002ab8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d119      	bne.n	8002aec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0220 	bic.w	r2, r2, #32
 8002ac6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d105      	bne.n	8002aec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	f043 0201 	orr.w	r2, r3, #1
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f7ff fd6b 	bl	80025c8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002af2:	e00e      	b.n	8002b12 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	f003 0310 	and.w	r3, r3, #16
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f7ff fd75 	bl	80025f0 <HAL_ADC_ErrorCallback>
}
 8002b06:	e004      	b.n	8002b12 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	4798      	blx	r3
}
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b26:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f7ff fd57 	bl	80025dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2240      	movs	r2, #64	; 0x40
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f043 0204 	orr.w	r2, r3, #4
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f7ff fd4a 	bl	80025f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e0ed      	b.n	8002d52 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d102      	bne.n	8002b88 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fe f8d0 	bl	8000d28 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b98:	f7ff fb7c 	bl	8002294 <HAL_GetTick>
 8002b9c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b9e:	e012      	b.n	8002bc6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ba0:	f7ff fb78 	bl	8002294 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b0a      	cmp	r3, #10
 8002bac:	d90b      	bls.n	8002bc6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2205      	movs	r2, #5
 8002bbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e0c5      	b.n	8002d52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0e5      	beq.n	8002ba0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0202 	bic.w	r2, r2, #2
 8002be2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002be4:	f7ff fb56 	bl	8002294 <HAL_GetTick>
 8002be8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bea:	e012      	b.n	8002c12 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bec:	f7ff fb52 	bl	8002294 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b0a      	cmp	r3, #10
 8002bf8:	d90b      	bls.n	8002c12 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2205      	movs	r2, #5
 8002c0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e09f      	b.n	8002d52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1e5      	bne.n	8002bec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	7e1b      	ldrb	r3, [r3, #24]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d108      	bne.n	8002c3a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	e007      	b.n	8002c4a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	7e5b      	ldrb	r3, [r3, #25]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d108      	bne.n	8002c64 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	e007      	b.n	8002c74 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	7e9b      	ldrb	r3, [r3, #26]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d108      	bne.n	8002c8e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0220 	orr.w	r2, r2, #32
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	e007      	b.n	8002c9e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0220 	bic.w	r2, r2, #32
 8002c9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	7edb      	ldrb	r3, [r3, #27]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d108      	bne.n	8002cb8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0210 	bic.w	r2, r2, #16
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	e007      	b.n	8002cc8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0210 	orr.w	r2, r2, #16
 8002cc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	7f1b      	ldrb	r3, [r3, #28]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d108      	bne.n	8002ce2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0208 	orr.w	r2, r2, #8
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e007      	b.n	8002cf2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0208 	bic.w	r2, r2, #8
 8002cf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	7f5b      	ldrb	r3, [r3, #29]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d108      	bne.n	8002d0c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0204 	orr.w	r2, r2, #4
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e007      	b.n	8002d1c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0204 	bic.w	r2, r2, #4
 8002d1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	ea42 0103 	orr.w	r1, r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	1e5a      	subs	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d72:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d74:	7cfb      	ldrb	r3, [r7, #19]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d003      	beq.n	8002d82 <HAL_CAN_ConfigFilter+0x26>
 8002d7a:	7cfb      	ldrb	r3, [r7, #19]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	f040 80c7 	bne.w	8002f10 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a69      	ldr	r2, [pc, #420]	; (8002f2c <HAL_CAN_ConfigFilter+0x1d0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d001      	beq.n	8002d90 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002d8c:	4b68      	ldr	r3, [pc, #416]	; (8002f30 <HAL_CAN_ConfigFilter+0x1d4>)
 8002d8e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d96:	f043 0201 	orr.w	r2, r3, #1
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	4a63      	ldr	r2, [pc, #396]	; (8002f30 <HAL_CAN_ConfigFilter+0x1d4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d111      	bne.n	8002dcc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002dae:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	021b      	lsls	r3, r3, #8
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	43db      	mvns	r3, r3
 8002de6:	401a      	ands	r2, r3
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d123      	bne.n	8002e3e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	401a      	ands	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e18:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	3248      	adds	r2, #72	; 0x48
 8002e1e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e32:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e34:	6979      	ldr	r1, [r7, #20]
 8002e36:	3348      	adds	r3, #72	; 0x48
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	440b      	add	r3, r1
 8002e3c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d122      	bne.n	8002e8c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e66:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	3248      	adds	r2, #72	; 0x48
 8002e6c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e80:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e82:	6979      	ldr	r1, [r7, #20]
 8002e84:	3348      	adds	r3, #72	; 0x48
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	440b      	add	r3, r1
 8002e8a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d109      	bne.n	8002ea8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002ea6:	e007      	b.n	8002eb8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	401a      	ands	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002ed2:	e007      	b.n	8002ee4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	431a      	orrs	r2, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d107      	bne.n	8002efc <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f02:	f023 0201 	bic.w	r2, r3, #1
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e006      	b.n	8002f1e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
  }
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40006c00 	.word	0x40006c00
 8002f30:	40006400 	.word	0x40006400

08002f34 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d12e      	bne.n	8002fa6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0201 	bic.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f60:	f7ff f998 	bl	8002294 <HAL_GetTick>
 8002f64:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f66:	e012      	b.n	8002f8e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f68:	f7ff f994 	bl	8002294 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b0a      	cmp	r3, #10
 8002f74:	d90b      	bls.n	8002f8e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2205      	movs	r2, #5
 8002f86:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e012      	b.n	8002fb4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1e5      	bne.n	8002f68 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e006      	b.n	8002fb4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
  }
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b089      	sub	sp, #36	; 0x24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fd0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002fda:	7ffb      	ldrb	r3, [r7, #31]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d003      	beq.n	8002fe8 <HAL_CAN_AddTxMessage+0x2c>
 8002fe0:	7ffb      	ldrb	r3, [r7, #31]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	f040 80b8 	bne.w	8003158 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d105      	bne.n	8003008 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 80a0 	beq.w	8003148 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	0e1b      	lsrs	r3, r3, #24
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d907      	bls.n	8003028 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e09e      	b.n	8003166 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003028:	2201      	movs	r2, #1
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	409a      	lsls	r2, r3
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10d      	bne.n	8003056 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003044:	68f9      	ldr	r1, [r7, #12]
 8003046:	6809      	ldr	r1, [r1, #0]
 8003048:	431a      	orrs	r2, r3
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	3318      	adds	r3, #24
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	440b      	add	r3, r1
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	e00f      	b.n	8003076 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003060:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003066:	68f9      	ldr	r1, [r7, #12]
 8003068:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800306a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	3318      	adds	r3, #24
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	440b      	add	r3, r1
 8003074:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6819      	ldr	r1, [r3, #0]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	3318      	adds	r3, #24
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	440b      	add	r3, r1
 8003086:	3304      	adds	r3, #4
 8003088:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	7d1b      	ldrb	r3, [r3, #20]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d111      	bne.n	80030b6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	3318      	adds	r3, #24
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	4413      	add	r3, r2
 800309e:	3304      	adds	r3, #4
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	6811      	ldr	r1, [r2, #0]
 80030a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	3318      	adds	r3, #24
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	440b      	add	r3, r1
 80030b2:	3304      	adds	r3, #4
 80030b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3307      	adds	r3, #7
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	061a      	lsls	r2, r3, #24
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3306      	adds	r3, #6
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	041b      	lsls	r3, r3, #16
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3305      	adds	r3, #5
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	4313      	orrs	r3, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	3204      	adds	r2, #4
 80030d6:	7812      	ldrb	r2, [r2, #0]
 80030d8:	4610      	mov	r0, r2
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	6811      	ldr	r1, [r2, #0]
 80030de:	ea43 0200 	orr.w	r2, r3, r0
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	440b      	add	r3, r1
 80030e8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80030ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3303      	adds	r3, #3
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	061a      	lsls	r2, r3, #24
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3302      	adds	r3, #2
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	041b      	lsls	r3, r3, #16
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3301      	adds	r3, #1
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	4313      	orrs	r3, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	7812      	ldrb	r2, [r2, #0]
 800310e:	4610      	mov	r0, r2
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	6811      	ldr	r1, [r2, #0]
 8003114:	ea43 0200 	orr.w	r2, r3, r0
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	440b      	add	r3, r1
 800311e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003122:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	3318      	adds	r3, #24
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	4413      	add	r3, r2
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	6811      	ldr	r1, [r2, #0]
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	3318      	adds	r3, #24
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	440b      	add	r3, r1
 8003142:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	e00e      	b.n	8003166 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e006      	b.n	8003166 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
  }
}
 8003166:	4618      	mov	r0, r3
 8003168:	3724      	adds	r7, #36	; 0x24
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003172:	b480      	push	{r7}
 8003174:	b085      	sub	sp, #20
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003184:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003186:	7afb      	ldrb	r3, [r7, #11]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d002      	beq.n	8003192 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800318c:	7afb      	ldrb	r3, [r7, #11]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d11d      	bne.n	80031ce <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	3301      	adds	r3, #1
 80031a4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	3301      	adds	r3, #1
 80031b8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3301      	adds	r3, #1
 80031cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80031ce:	68fb      	ldr	r3, [r7, #12]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031f0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80031f2:	7dfb      	ldrb	r3, [r7, #23]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d003      	beq.n	8003200 <HAL_CAN_GetRxMessage+0x24>
 80031f8:	7dfb      	ldrb	r3, [r7, #23]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	f040 80f3 	bne.w	80033e6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10e      	bne.n	8003224 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d116      	bne.n	8003242 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0e7      	b.n	80033f4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d107      	bne.n	8003242 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e0d8      	b.n	80033f4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	331b      	adds	r3, #27
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	4413      	add	r3, r2
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0204 	and.w	r2, r3, #4
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10c      	bne.n	800327a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	331b      	adds	r3, #27
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	4413      	add	r3, r2
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	0d5b      	lsrs	r3, r3, #21
 8003270:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	e00b      	b.n	8003292 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	331b      	adds	r3, #27
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	4413      	add	r3, r2
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	08db      	lsrs	r3, r3, #3
 800328a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	331b      	adds	r3, #27
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	4413      	add	r3, r2
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0202 	and.w	r2, r3, #2
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	331b      	adds	r3, #27
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	4413      	add	r3, r2
 80032b4:	3304      	adds	r3, #4
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 020f 	and.w	r2, r3, #15
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	331b      	adds	r3, #27
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	4413      	add	r3, r2
 80032cc:	3304      	adds	r3, #4
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	0a1b      	lsrs	r3, r3, #8
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	331b      	adds	r3, #27
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	4413      	add	r3, r2
 80032e4:	3304      	adds	r3, #4
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	0c1b      	lsrs	r3, r3, #16
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	b2da      	uxtb	r2, r3
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	4413      	add	r3, r2
 8003310:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	0a1a      	lsrs	r2, r3, #8
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	3301      	adds	r3, #1
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	4413      	add	r3, r2
 800332a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	0c1a      	lsrs	r2, r3, #16
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	3302      	adds	r3, #2
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	4413      	add	r3, r2
 8003344:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	0e1a      	lsrs	r2, r3, #24
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	3303      	adds	r3, #3
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	4413      	add	r3, r2
 800335e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	3304      	adds	r3, #4
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	4413      	add	r3, r2
 8003376:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	0a1a      	lsrs	r2, r3, #8
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	3305      	adds	r3, #5
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	4413      	add	r3, r2
 8003390:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	0c1a      	lsrs	r2, r3, #16
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	3306      	adds	r3, #6
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	0e1a      	lsrs	r2, r3, #24
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	3307      	adds	r3, #7
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d108      	bne.n	80033d2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0220 	orr.w	r2, r2, #32
 80033ce:	60da      	str	r2, [r3, #12]
 80033d0:	e007      	b.n	80033e2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0220 	orr.w	r2, r2, #32
 80033e0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	e006      	b.n	80033f4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
  }
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	371c      	adds	r7, #28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003410:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d002      	beq.n	800341e <HAL_CAN_ActivateNotification+0x1e>
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d109      	bne.n	8003432 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6959      	ldr	r1, [r3, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	e006      	b.n	8003440 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
  }
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	; 0x28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003454:	2300      	movs	r3, #0
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d07c      	beq.n	800358c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d023      	beq.n	80034e4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2201      	movs	r2, #1
 80034a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f983 	bl	80037ba <HAL_CAN_TxMailbox0CompleteCallback>
 80034b4:	e016      	b.n	80034e4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d004      	beq.n	80034ca <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
 80034c8:	e00c      	b.n	80034e4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d004      	beq.n	80034de <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
 80034dc:	e002      	b.n	80034e4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f989 	bl	80037f6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d024      	beq.n	8003538 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f963 	bl	80037ce <HAL_CAN_TxMailbox1CompleteCallback>
 8003508:	e016      	b.n	8003538 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003510:	2b00      	cmp	r3, #0
 8003512:	d004      	beq.n	800351e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
 800351c:	e00c      	b.n	8003538 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003524:	2b00      	cmp	r3, #0
 8003526:	d004      	beq.n	8003532 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
 8003530:	e002      	b.n	8003538 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f969 	bl	800380a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d024      	beq.n	800358c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800354a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f943 	bl	80037e2 <HAL_CAN_TxMailbox2CompleteCallback>
 800355c:	e016      	b.n	800358c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d004      	beq.n	8003572 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
 8003570:	e00c      	b.n	800358c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d004      	beq.n	8003586 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
 8003584:	e002      	b.n	800358c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f949 	bl	800381e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00c      	beq.n	80035b0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2210      	movs	r2, #16
 80035ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d006      	beq.n	80035d2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2208      	movs	r2, #8
 80035ca:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f930 	bl	8003832 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d009      	beq.n	80035f0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fd fc82 	bl	8000ef4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00c      	beq.n	8003614 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800360a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2210      	movs	r2, #16
 8003612:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00b      	beq.n	8003636 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d006      	beq.n	8003636 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2208      	movs	r2, #8
 800362e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f912 	bl	800385a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	d009      	beq.n	8003654 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f8f9 	bl	8003846 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00b      	beq.n	8003676 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b00      	cmp	r3, #0
 8003666:	d006      	beq.n	8003676 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2210      	movs	r2, #16
 800366e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f8fc 	bl	800386e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00b      	beq.n	8003698 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d006      	beq.n	8003698 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2208      	movs	r2, #8
 8003690:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f8f5 	bl	8003882 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d07b      	beq.n	800379a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d072      	beq.n	8003792 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d008      	beq.n	80036c8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	f043 0302 	orr.w	r3, r3, #2
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d008      	beq.n	8003700 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	f043 0304 	orr.w	r3, r3, #4
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003706:	2b00      	cmp	r3, #0
 8003708:	d043      	beq.n	8003792 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003710:	2b00      	cmp	r3, #0
 8003712:	d03e      	beq.n	8003792 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800371a:	2b60      	cmp	r3, #96	; 0x60
 800371c:	d02b      	beq.n	8003776 <HAL_CAN_IRQHandler+0x32a>
 800371e:	2b60      	cmp	r3, #96	; 0x60
 8003720:	d82e      	bhi.n	8003780 <HAL_CAN_IRQHandler+0x334>
 8003722:	2b50      	cmp	r3, #80	; 0x50
 8003724:	d022      	beq.n	800376c <HAL_CAN_IRQHandler+0x320>
 8003726:	2b50      	cmp	r3, #80	; 0x50
 8003728:	d82a      	bhi.n	8003780 <HAL_CAN_IRQHandler+0x334>
 800372a:	2b40      	cmp	r3, #64	; 0x40
 800372c:	d019      	beq.n	8003762 <HAL_CAN_IRQHandler+0x316>
 800372e:	2b40      	cmp	r3, #64	; 0x40
 8003730:	d826      	bhi.n	8003780 <HAL_CAN_IRQHandler+0x334>
 8003732:	2b30      	cmp	r3, #48	; 0x30
 8003734:	d010      	beq.n	8003758 <HAL_CAN_IRQHandler+0x30c>
 8003736:	2b30      	cmp	r3, #48	; 0x30
 8003738:	d822      	bhi.n	8003780 <HAL_CAN_IRQHandler+0x334>
 800373a:	2b10      	cmp	r3, #16
 800373c:	d002      	beq.n	8003744 <HAL_CAN_IRQHandler+0x2f8>
 800373e:	2b20      	cmp	r3, #32
 8003740:	d005      	beq.n	800374e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003742:	e01d      	b.n	8003780 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	f043 0308 	orr.w	r3, r3, #8
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800374c:	e019      	b.n	8003782 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	f043 0310 	orr.w	r3, r3, #16
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003756:	e014      	b.n	8003782 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	f043 0320 	orr.w	r3, r3, #32
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003760:	e00f      	b.n	8003782 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800376a:	e00a      	b.n	8003782 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003774:	e005      	b.n	8003782 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800377e:	e000      	b.n	8003782 <HAL_CAN_IRQHandler+0x336>
            break;
 8003780:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699a      	ldr	r2, [r3, #24]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003790:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2204      	movs	r2, #4
 8003798:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f872 	bl	8003896 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80037b2:	bf00      	nop
 80037b4:	3728      	adds	r7, #40	; 0x28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038bc:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <__NVIC_SetPriorityGrouping+0x44>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038c8:	4013      	ands	r3, r2
 80038ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038de:	4a04      	ldr	r2, [pc, #16]	; (80038f0 <__NVIC_SetPriorityGrouping+0x44>)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	60d3      	str	r3, [r2, #12]
}
 80038e4:	bf00      	nop
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	e000ed00 	.word	0xe000ed00

080038f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038f8:	4b04      	ldr	r3, [pc, #16]	; (800390c <__NVIC_GetPriorityGrouping+0x18>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	0a1b      	lsrs	r3, r3, #8
 80038fe:	f003 0307 	and.w	r3, r3, #7
}
 8003902:	4618      	mov	r0, r3
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800391a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391e:	2b00      	cmp	r3, #0
 8003920:	db0b      	blt.n	800393a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	f003 021f 	and.w	r2, r3, #31
 8003928:	4907      	ldr	r1, [pc, #28]	; (8003948 <__NVIC_EnableIRQ+0x38>)
 800392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	2001      	movs	r0, #1
 8003932:	fa00 f202 	lsl.w	r2, r0, r2
 8003936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	e000e100 	.word	0xe000e100

0800394c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	6039      	str	r1, [r7, #0]
 8003956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395c:	2b00      	cmp	r3, #0
 800395e:	db0a      	blt.n	8003976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	b2da      	uxtb	r2, r3
 8003964:	490c      	ldr	r1, [pc, #48]	; (8003998 <__NVIC_SetPriority+0x4c>)
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	0112      	lsls	r2, r2, #4
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	440b      	add	r3, r1
 8003970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003974:	e00a      	b.n	800398c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	b2da      	uxtb	r2, r3
 800397a:	4908      	ldr	r1, [pc, #32]	; (800399c <__NVIC_SetPriority+0x50>)
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	3b04      	subs	r3, #4
 8003984:	0112      	lsls	r2, r2, #4
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	440b      	add	r3, r1
 800398a:	761a      	strb	r2, [r3, #24]
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	e000e100 	.word	0xe000e100
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b089      	sub	sp, #36	; 0x24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f1c3 0307 	rsb	r3, r3, #7
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	bf28      	it	cs
 80039be:	2304      	movcs	r3, #4
 80039c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	3304      	adds	r3, #4
 80039c6:	2b06      	cmp	r3, #6
 80039c8:	d902      	bls.n	80039d0 <NVIC_EncodePriority+0x30>
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	3b03      	subs	r3, #3
 80039ce:	e000      	b.n	80039d2 <NVIC_EncodePriority+0x32>
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d4:	f04f 32ff 	mov.w	r2, #4294967295
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43da      	mvns	r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	401a      	ands	r2, r3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039e8:	f04f 31ff 	mov.w	r1, #4294967295
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	fa01 f303 	lsl.w	r3, r1, r3
 80039f2:	43d9      	mvns	r1, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f8:	4313      	orrs	r3, r2
         );
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3724      	adds	r7, #36	; 0x24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a18:	d301      	bcc.n	8003a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e00f      	b.n	8003a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a1e:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <SysTick_Config+0x40>)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a26:	210f      	movs	r1, #15
 8003a28:	f04f 30ff 	mov.w	r0, #4294967295
 8003a2c:	f7ff ff8e 	bl	800394c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <SysTick_Config+0x40>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a36:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <SysTick_Config+0x40>)
 8003a38:	2207      	movs	r2, #7
 8003a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	e000e010 	.word	0xe000e010

08003a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff ff29 	bl	80038ac <__NVIC_SetPriorityGrouping>
}
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b086      	sub	sp, #24
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	4603      	mov	r3, r0
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	607a      	str	r2, [r7, #4]
 8003a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a74:	f7ff ff3e 	bl	80038f4 <__NVIC_GetPriorityGrouping>
 8003a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	6978      	ldr	r0, [r7, #20]
 8003a80:	f7ff ff8e 	bl	80039a0 <NVIC_EncodePriority>
 8003a84:	4602      	mov	r2, r0
 8003a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff ff5d 	bl	800394c <__NVIC_SetPriority>
}
 8003a92:	bf00      	nop
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff ff31 	bl	8003910 <__NVIC_EnableIRQ>
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff ffa2 	bl	8003a08 <SysTick_Config>
 8003ac4:	4603      	mov	r3, r0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e014      	b.n	8003b0a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	791b      	ldrb	r3, [r3, #4]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d105      	bne.n	8003af6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7fd fa77 	bl	8000fe4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2202      	movs	r2, #2
 8003afa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	795b      	ldrb	r3, [r3, #5]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_DAC_Start+0x16>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e040      	b.n	8003baa <HAL_DAC_Start+0x98>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2202      	movs	r2, #2
 8003b32:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6819      	ldr	r1, [r3, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	2201      	movs	r2, #1
 8003b42:	409a      	lsls	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10f      	bne.n	8003b72 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003b5c:	2b3c      	cmp	r3, #60	; 0x3c
 8003b5e:	d11d      	bne.n	8003b9c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	605a      	str	r2, [r3, #4]
 8003b70:	e014      	b.n	8003b9c <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	213c      	movs	r1, #60	; 0x3c
 8003b84:	fa01 f303 	lsl.w	r3, r1, r3
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d107      	bne.n	8003b9c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0202 	orr.w	r2, r2, #2
 8003b9a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b087      	sub	sp, #28
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d105      	bne.n	8003be0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	3308      	adds	r3, #8
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	e004      	b.n	8003bea <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4413      	add	r3, r2
 8003be6:	3314      	adds	r3, #20
 8003be8:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	461a      	mov	r2, r3
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	795b      	ldrb	r3, [r3, #5]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_DAC_ConfigChannel+0x18>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e03c      	b.n	8003c92 <HAL_DAC_ConfigChannel+0x92>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2202      	movs	r2, #2
 8003c22:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6819      	ldr	r1, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	22c0      	movs	r2, #192	; 0xc0
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	43da      	mvns	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	400a      	ands	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2201      	movs	r2, #1
 8003c88:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cac:	f7fe faf2 	bl	8002294 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e099      	b.n	8003df0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0201 	bic.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cdc:	e00f      	b.n	8003cfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cde:	f7fe fad9 	bl	8002294 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b05      	cmp	r3, #5
 8003cea:	d908      	bls.n	8003cfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e078      	b.n	8003df0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e8      	bne.n	8003cde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	4b38      	ldr	r3, [pc, #224]	; (8003df8 <HAL_DMA_Init+0x158>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d107      	bne.n	8003d68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	4313      	orrs	r3, r2
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f023 0307 	bic.w	r3, r3, #7
 8003d7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d117      	bne.n	8003dc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00e      	beq.n	8003dc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fadf 	bl	8004368 <DMA_CheckFifoParam>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2240      	movs	r2, #64	; 0x40
 8003db4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e016      	b.n	8003df0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fa96 	bl	80042fc <DMA_CalcBaseAndBitshift>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd8:	223f      	movs	r2, #63	; 0x3f
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	e010803f 	.word	0xe010803f

08003dfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_DMA_Start_IT+0x26>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e040      	b.n	8003ea4 <HAL_DMA_Start_IT+0xa8>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d12f      	bne.n	8003e96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2202      	movs	r2, #2
 8003e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	68b9      	ldr	r1, [r7, #8]
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 fa28 	bl	80042a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e54:	223f      	movs	r2, #63	; 0x3f
 8003e56:	409a      	lsls	r2, r3
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0216 	orr.w	r2, r2, #22
 8003e6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d007      	beq.n	8003e84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0208 	orr.w	r2, r2, #8
 8003e82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	e005      	b.n	8003ea2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003eba:	f7fe f9eb 	bl	8002294 <HAL_GetTick>
 8003ebe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d008      	beq.n	8003ede <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2280      	movs	r2, #128	; 0x80
 8003ed0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e052      	b.n	8003f84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0216 	bic.w	r2, r2, #22
 8003eec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695a      	ldr	r2, [r3, #20]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003efc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d103      	bne.n	8003f0e <HAL_DMA_Abort+0x62>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d007      	beq.n	8003f1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0208 	bic.w	r2, r2, #8
 8003f1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0201 	bic.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f2e:	e013      	b.n	8003f58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f30:	f7fe f9b0 	bl	8002294 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b05      	cmp	r3, #5
 8003f3c:	d90c      	bls.n	8003f58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2203      	movs	r2, #3
 8003f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e015      	b.n	8003f84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e4      	bne.n	8003f30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6a:	223f      	movs	r2, #63	; 0x3f
 8003f6c:	409a      	lsls	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f98:	4b8e      	ldr	r3, [pc, #568]	; (80041d4 <HAL_DMA_IRQHandler+0x248>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a8e      	ldr	r2, [pc, #568]	; (80041d8 <HAL_DMA_IRQHandler+0x24c>)
 8003f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa2:	0a9b      	lsrs	r3, r3, #10
 8003fa4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003faa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb6:	2208      	movs	r2, #8
 8003fb8:	409a      	lsls	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01a      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d013      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0204 	bic.w	r2, r2, #4
 8003fde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff0:	f043 0201 	orr.w	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	409a      	lsls	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d012      	beq.n	800402e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00b      	beq.n	800402e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401a:	2201      	movs	r2, #1
 800401c:	409a      	lsls	r2, r3
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004026:	f043 0202 	orr.w	r2, r3, #2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004032:	2204      	movs	r2, #4
 8004034:	409a      	lsls	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4013      	ands	r3, r2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d012      	beq.n	8004064 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00b      	beq.n	8004064 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004050:	2204      	movs	r2, #4
 8004052:	409a      	lsls	r2, r3
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405c:	f043 0204 	orr.w	r2, r3, #4
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	2210      	movs	r2, #16
 800406a:	409a      	lsls	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d043      	beq.n	80040fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d03c      	beq.n	80040fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004086:	2210      	movs	r2, #16
 8004088:	409a      	lsls	r2, r3
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d018      	beq.n	80040ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d108      	bne.n	80040bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d024      	beq.n	80040fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	4798      	blx	r3
 80040ba:	e01f      	b.n	80040fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01b      	beq.n	80040fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	4798      	blx	r3
 80040cc:	e016      	b.n	80040fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d107      	bne.n	80040ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0208 	bic.w	r2, r2, #8
 80040ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004100:	2220      	movs	r2, #32
 8004102:	409a      	lsls	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4013      	ands	r3, r2
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 808f 	beq.w	800422c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0310 	and.w	r3, r3, #16
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 8087 	beq.w	800422c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004122:	2220      	movs	r2, #32
 8004124:	409a      	lsls	r2, r3
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b05      	cmp	r3, #5
 8004134:	d136      	bne.n	80041a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0216 	bic.w	r2, r2, #22
 8004144:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695a      	ldr	r2, [r3, #20]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004154:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d103      	bne.n	8004166 <HAL_DMA_IRQHandler+0x1da>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004162:	2b00      	cmp	r3, #0
 8004164:	d007      	beq.n	8004176 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0208 	bic.w	r2, r2, #8
 8004174:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417a:	223f      	movs	r2, #63	; 0x3f
 800417c:	409a      	lsls	r2, r3
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004196:	2b00      	cmp	r3, #0
 8004198:	d07e      	beq.n	8004298 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	4798      	blx	r3
        }
        return;
 80041a2:	e079      	b.n	8004298 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d01d      	beq.n	80041ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10d      	bne.n	80041dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d031      	beq.n	800422c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	4798      	blx	r3
 80041d0:	e02c      	b.n	800422c <HAL_DMA_IRQHandler+0x2a0>
 80041d2:	bf00      	nop
 80041d4:	20000000 	.word	0x20000000
 80041d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d023      	beq.n	800422c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	4798      	blx	r3
 80041ec:	e01e      	b.n	800422c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10f      	bne.n	800421c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0210 	bic.w	r2, r2, #16
 800420a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004230:	2b00      	cmp	r3, #0
 8004232:	d032      	beq.n	800429a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d022      	beq.n	8004286 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2205      	movs	r2, #5
 8004244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0201 	bic.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	3301      	adds	r3, #1
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	429a      	cmp	r2, r3
 8004262:	d307      	bcc.n	8004274 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f2      	bne.n	8004258 <HAL_DMA_IRQHandler+0x2cc>
 8004272:	e000      	b.n	8004276 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004274:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	4798      	blx	r3
 8004296:	e000      	b.n	800429a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004298:	bf00      	nop
    }
  }
}
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2b40      	cmp	r3, #64	; 0x40
 80042cc:	d108      	bne.n	80042e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042de:	e007      	b.n	80042f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	60da      	str	r2, [r3, #12]
}
 80042f0:	bf00      	nop
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	3b10      	subs	r3, #16
 800430c:	4a14      	ldr	r2, [pc, #80]	; (8004360 <DMA_CalcBaseAndBitshift+0x64>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	091b      	lsrs	r3, r3, #4
 8004314:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004316:	4a13      	ldr	r2, [pc, #76]	; (8004364 <DMA_CalcBaseAndBitshift+0x68>)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4413      	add	r3, r2
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b03      	cmp	r3, #3
 8004328:	d909      	bls.n	800433e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004332:	f023 0303 	bic.w	r3, r3, #3
 8004336:	1d1a      	adds	r2, r3, #4
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	659a      	str	r2, [r3, #88]	; 0x58
 800433c:	e007      	b.n	800434e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004346:	f023 0303 	bic.w	r3, r3, #3
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	aaaaaaab 	.word	0xaaaaaaab
 8004364:	0800623c 	.word	0x0800623c

08004368 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d11f      	bne.n	80043c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b03      	cmp	r3, #3
 8004386:	d856      	bhi.n	8004436 <DMA_CheckFifoParam+0xce>
 8004388:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <DMA_CheckFifoParam+0x28>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080043a1 	.word	0x080043a1
 8004394:	080043b3 	.word	0x080043b3
 8004398:	080043a1 	.word	0x080043a1
 800439c:	08004437 	.word	0x08004437
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d046      	beq.n	800443a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043b0:	e043      	b.n	800443a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043ba:	d140      	bne.n	800443e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c0:	e03d      	b.n	800443e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ca:	d121      	bne.n	8004410 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d837      	bhi.n	8004442 <DMA_CheckFifoParam+0xda>
 80043d2:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <DMA_CheckFifoParam+0x70>)
 80043d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d8:	080043e9 	.word	0x080043e9
 80043dc:	080043ef 	.word	0x080043ef
 80043e0:	080043e9 	.word	0x080043e9
 80043e4:	08004401 	.word	0x08004401
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	73fb      	strb	r3, [r7, #15]
      break;
 80043ec:	e030      	b.n	8004450 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d025      	beq.n	8004446 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043fe:	e022      	b.n	8004446 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004408:	d11f      	bne.n	800444a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800440e:	e01c      	b.n	800444a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d903      	bls.n	800441e <DMA_CheckFifoParam+0xb6>
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b03      	cmp	r3, #3
 800441a:	d003      	beq.n	8004424 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800441c:	e018      	b.n	8004450 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	73fb      	strb	r3, [r7, #15]
      break;
 8004422:	e015      	b.n	8004450 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00e      	beq.n	800444e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
      break;
 8004434:	e00b      	b.n	800444e <DMA_CheckFifoParam+0xe6>
      break;
 8004436:	bf00      	nop
 8004438:	e00a      	b.n	8004450 <DMA_CheckFifoParam+0xe8>
      break;
 800443a:	bf00      	nop
 800443c:	e008      	b.n	8004450 <DMA_CheckFifoParam+0xe8>
      break;
 800443e:	bf00      	nop
 8004440:	e006      	b.n	8004450 <DMA_CheckFifoParam+0xe8>
      break;
 8004442:	bf00      	nop
 8004444:	e004      	b.n	8004450 <DMA_CheckFifoParam+0xe8>
      break;
 8004446:	bf00      	nop
 8004448:	e002      	b.n	8004450 <DMA_CheckFifoParam+0xe8>
      break;   
 800444a:	bf00      	nop
 800444c:	e000      	b.n	8004450 <DMA_CheckFifoParam+0xe8>
      break;
 800444e:	bf00      	nop
    }
  } 
  
  return status; 
 8004450:	7bfb      	ldrb	r3, [r7, #15]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop

08004460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004460:	b480      	push	{r7}
 8004462:	b089      	sub	sp, #36	; 0x24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800446e:	2300      	movs	r3, #0
 8004470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004472:	2300      	movs	r3, #0
 8004474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	e165      	b.n	8004748 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800447c:	2201      	movs	r2, #1
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4013      	ands	r3, r2
 800448e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	429a      	cmp	r2, r3
 8004496:	f040 8154 	bne.w	8004742 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d005      	beq.n	80044b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d130      	bne.n	8004514 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	2203      	movs	r2, #3
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43db      	mvns	r3, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4013      	ands	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4313      	orrs	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044e8:	2201      	movs	r2, #1
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	43db      	mvns	r3, r3
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	4013      	ands	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	f003 0201 	and.w	r2, r3, #1
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4313      	orrs	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	2b03      	cmp	r3, #3
 800451e:	d017      	beq.n	8004550 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	2203      	movs	r2, #3
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	43db      	mvns	r3, r3
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4013      	ands	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4313      	orrs	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 0303 	and.w	r3, r3, #3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d123      	bne.n	80045a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	08da      	lsrs	r2, r3, #3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3208      	adds	r2, #8
 8004564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004568:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	220f      	movs	r2, #15
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	43db      	mvns	r3, r3
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4013      	ands	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4313      	orrs	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	08da      	lsrs	r2, r3, #3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3208      	adds	r2, #8
 800459e:	69b9      	ldr	r1, [r7, #24]
 80045a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	2203      	movs	r2, #3
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	43db      	mvns	r3, r3
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	4013      	ands	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f003 0203 	and.w	r2, r3, #3
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 80ae 	beq.w	8004742 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	4b5d      	ldr	r3, [pc, #372]	; (8004760 <HAL_GPIO_Init+0x300>)
 80045ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ee:	4a5c      	ldr	r2, [pc, #368]	; (8004760 <HAL_GPIO_Init+0x300>)
 80045f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045f4:	6453      	str	r3, [r2, #68]	; 0x44
 80045f6:	4b5a      	ldr	r3, [pc, #360]	; (8004760 <HAL_GPIO_Init+0x300>)
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004602:	4a58      	ldr	r2, [pc, #352]	; (8004764 <HAL_GPIO_Init+0x304>)
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	089b      	lsrs	r3, r3, #2
 8004608:	3302      	adds	r3, #2
 800460a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800460e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	220f      	movs	r2, #15
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43db      	mvns	r3, r3
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	4013      	ands	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a4f      	ldr	r2, [pc, #316]	; (8004768 <HAL_GPIO_Init+0x308>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d025      	beq.n	800467a <HAL_GPIO_Init+0x21a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a4e      	ldr	r2, [pc, #312]	; (800476c <HAL_GPIO_Init+0x30c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d01f      	beq.n	8004676 <HAL_GPIO_Init+0x216>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a4d      	ldr	r2, [pc, #308]	; (8004770 <HAL_GPIO_Init+0x310>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d019      	beq.n	8004672 <HAL_GPIO_Init+0x212>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a4c      	ldr	r2, [pc, #304]	; (8004774 <HAL_GPIO_Init+0x314>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d013      	beq.n	800466e <HAL_GPIO_Init+0x20e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a4b      	ldr	r2, [pc, #300]	; (8004778 <HAL_GPIO_Init+0x318>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00d      	beq.n	800466a <HAL_GPIO_Init+0x20a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a4a      	ldr	r2, [pc, #296]	; (800477c <HAL_GPIO_Init+0x31c>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d007      	beq.n	8004666 <HAL_GPIO_Init+0x206>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a49      	ldr	r2, [pc, #292]	; (8004780 <HAL_GPIO_Init+0x320>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d101      	bne.n	8004662 <HAL_GPIO_Init+0x202>
 800465e:	2306      	movs	r3, #6
 8004660:	e00c      	b.n	800467c <HAL_GPIO_Init+0x21c>
 8004662:	2307      	movs	r3, #7
 8004664:	e00a      	b.n	800467c <HAL_GPIO_Init+0x21c>
 8004666:	2305      	movs	r3, #5
 8004668:	e008      	b.n	800467c <HAL_GPIO_Init+0x21c>
 800466a:	2304      	movs	r3, #4
 800466c:	e006      	b.n	800467c <HAL_GPIO_Init+0x21c>
 800466e:	2303      	movs	r3, #3
 8004670:	e004      	b.n	800467c <HAL_GPIO_Init+0x21c>
 8004672:	2302      	movs	r3, #2
 8004674:	e002      	b.n	800467c <HAL_GPIO_Init+0x21c>
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <HAL_GPIO_Init+0x21c>
 800467a:	2300      	movs	r3, #0
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	f002 0203 	and.w	r2, r2, #3
 8004682:	0092      	lsls	r2, r2, #2
 8004684:	4093      	lsls	r3, r2
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	4313      	orrs	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800468c:	4935      	ldr	r1, [pc, #212]	; (8004764 <HAL_GPIO_Init+0x304>)
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	089b      	lsrs	r3, r3, #2
 8004692:	3302      	adds	r3, #2
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800469a:	4b3a      	ldr	r3, [pc, #232]	; (8004784 <HAL_GPIO_Init+0x324>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	43db      	mvns	r3, r3
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	4013      	ands	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046be:	4a31      	ldr	r2, [pc, #196]	; (8004784 <HAL_GPIO_Init+0x324>)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046c4:	4b2f      	ldr	r3, [pc, #188]	; (8004784 <HAL_GPIO_Init+0x324>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	43db      	mvns	r3, r3
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	4013      	ands	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046e8:	4a26      	ldr	r2, [pc, #152]	; (8004784 <HAL_GPIO_Init+0x324>)
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046ee:	4b25      	ldr	r3, [pc, #148]	; (8004784 <HAL_GPIO_Init+0x324>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	43db      	mvns	r3, r3
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4013      	ands	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	4313      	orrs	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004712:	4a1c      	ldr	r2, [pc, #112]	; (8004784 <HAL_GPIO_Init+0x324>)
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004718:	4b1a      	ldr	r3, [pc, #104]	; (8004784 <HAL_GPIO_Init+0x324>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	43db      	mvns	r3, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4013      	ands	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800473c:	4a11      	ldr	r2, [pc, #68]	; (8004784 <HAL_GPIO_Init+0x324>)
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	3301      	adds	r3, #1
 8004746:	61fb      	str	r3, [r7, #28]
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	2b0f      	cmp	r3, #15
 800474c:	f67f ae96 	bls.w	800447c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004750:	bf00      	nop
 8004752:	bf00      	nop
 8004754:	3724      	adds	r7, #36	; 0x24
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40023800 	.word	0x40023800
 8004764:	40013800 	.word	0x40013800
 8004768:	40020000 	.word	0x40020000
 800476c:	40020400 	.word	0x40020400
 8004770:	40020800 	.word	0x40020800
 8004774:	40020c00 	.word	0x40020c00
 8004778:	40021000 	.word	0x40021000
 800477c:	40021400 	.word	0x40021400
 8004780:	40021800 	.word	0x40021800
 8004784:	40013c00 	.word	0x40013c00

08004788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0cc      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800479c:	4b68      	ldr	r3, [pc, #416]	; (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d90c      	bls.n	80047c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047aa:	4b65      	ldr	r3, [pc, #404]	; (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b2:	4b63      	ldr	r3, [pc, #396]	; (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d001      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0b8      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d020      	beq.n	8004812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047dc:	4b59      	ldr	r3, [pc, #356]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4a58      	ldr	r2, [pc, #352]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047f4:	4b53      	ldr	r3, [pc, #332]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4a52      	ldr	r2, [pc, #328]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004800:	4b50      	ldr	r3, [pc, #320]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	494d      	ldr	r1, [pc, #308]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	4313      	orrs	r3, r2
 8004810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d044      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d107      	bne.n	8004836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004826:	4b47      	ldr	r3, [pc, #284]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d119      	bne.n	8004866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e07f      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d003      	beq.n	8004846 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004842:	2b03      	cmp	r3, #3
 8004844:	d107      	bne.n	8004856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004846:	4b3f      	ldr	r3, [pc, #252]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e06f      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004856:	4b3b      	ldr	r3, [pc, #236]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e067      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004866:	4b37      	ldr	r3, [pc, #220]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f023 0203 	bic.w	r2, r3, #3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4934      	ldr	r1, [pc, #208]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	4313      	orrs	r3, r2
 8004876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004878:	f7fd fd0c 	bl	8002294 <HAL_GetTick>
 800487c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487e:	e00a      	b.n	8004896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004880:	f7fd fd08 	bl	8002294 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f241 3288 	movw	r2, #5000	; 0x1388
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e04f      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004896:	4b2b      	ldr	r3, [pc, #172]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 020c 	and.w	r2, r3, #12
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d1eb      	bne.n	8004880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048a8:	4b25      	ldr	r3, [pc, #148]	; (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d20c      	bcs.n	80048d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b6:	4b22      	ldr	r3, [pc, #136]	; (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048be:	4b20      	ldr	r3, [pc, #128]	; (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e032      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d008      	beq.n	80048ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048dc:	4b19      	ldr	r3, [pc, #100]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	4916      	ldr	r1, [pc, #88]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d009      	beq.n	800490e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048fa:	4b12      	ldr	r3, [pc, #72]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	490e      	ldr	r1, [pc, #56]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	4313      	orrs	r3, r2
 800490c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800490e:	f000 f821 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8004912:	4602      	mov	r2, r0
 8004914:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	091b      	lsrs	r3, r3, #4
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	490a      	ldr	r1, [pc, #40]	; (8004948 <HAL_RCC_ClockConfig+0x1c0>)
 8004920:	5ccb      	ldrb	r3, [r1, r3]
 8004922:	fa22 f303 	lsr.w	r3, r2, r3
 8004926:	4a09      	ldr	r2, [pc, #36]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800492a:	4b09      	ldr	r3, [pc, #36]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fd fc6c 	bl	800220c <HAL_InitTick>

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40023c00 	.word	0x40023c00
 8004944:	40023800 	.word	0x40023800
 8004948:	0800622c 	.word	0x0800622c
 800494c:	20000000 	.word	0x20000000
 8004950:	20000004 	.word	0x20000004

08004954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004958:	b090      	sub	sp, #64	; 0x40
 800495a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	637b      	str	r3, [r7, #52]	; 0x34
 8004960:	2300      	movs	r3, #0
 8004962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004964:	2300      	movs	r3, #0
 8004966:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800496c:	4b59      	ldr	r3, [pc, #356]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f003 030c 	and.w	r3, r3, #12
 8004974:	2b08      	cmp	r3, #8
 8004976:	d00d      	beq.n	8004994 <HAL_RCC_GetSysClockFreq+0x40>
 8004978:	2b08      	cmp	r3, #8
 800497a:	f200 80a1 	bhi.w	8004ac0 <HAL_RCC_GetSysClockFreq+0x16c>
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <HAL_RCC_GetSysClockFreq+0x34>
 8004982:	2b04      	cmp	r3, #4
 8004984:	d003      	beq.n	800498e <HAL_RCC_GetSysClockFreq+0x3a>
 8004986:	e09b      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004988:	4b53      	ldr	r3, [pc, #332]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x184>)
 800498a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800498c:	e09b      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800498e:	4b53      	ldr	r3, [pc, #332]	; (8004adc <HAL_RCC_GetSysClockFreq+0x188>)
 8004990:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004992:	e098      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004994:	4b4f      	ldr	r3, [pc, #316]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800499c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800499e:	4b4d      	ldr	r3, [pc, #308]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d028      	beq.n	80049fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049aa:	4b4a      	ldr	r3, [pc, #296]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	099b      	lsrs	r3, r3, #6
 80049b0:	2200      	movs	r2, #0
 80049b2:	623b      	str	r3, [r7, #32]
 80049b4:	627a      	str	r2, [r7, #36]	; 0x24
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049bc:	2100      	movs	r1, #0
 80049be:	4b47      	ldr	r3, [pc, #284]	; (8004adc <HAL_RCC_GetSysClockFreq+0x188>)
 80049c0:	fb03 f201 	mul.w	r2, r3, r1
 80049c4:	2300      	movs	r3, #0
 80049c6:	fb00 f303 	mul.w	r3, r0, r3
 80049ca:	4413      	add	r3, r2
 80049cc:	4a43      	ldr	r2, [pc, #268]	; (8004adc <HAL_RCC_GetSysClockFreq+0x188>)
 80049ce:	fba0 1202 	umull	r1, r2, r0, r2
 80049d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049d4:	460a      	mov	r2, r1
 80049d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80049d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049da:	4413      	add	r3, r2
 80049dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e0:	2200      	movs	r2, #0
 80049e2:	61bb      	str	r3, [r7, #24]
 80049e4:	61fa      	str	r2, [r7, #28]
 80049e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80049ee:	f7fb ff19 	bl	8000824 <__aeabi_uldivmod>
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	4613      	mov	r3, r2
 80049f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049fa:	e053      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049fc:	4b35      	ldr	r3, [pc, #212]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	099b      	lsrs	r3, r3, #6
 8004a02:	2200      	movs	r2, #0
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	617a      	str	r2, [r7, #20]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a0e:	f04f 0b00 	mov.w	fp, #0
 8004a12:	4652      	mov	r2, sl
 8004a14:	465b      	mov	r3, fp
 8004a16:	f04f 0000 	mov.w	r0, #0
 8004a1a:	f04f 0100 	mov.w	r1, #0
 8004a1e:	0159      	lsls	r1, r3, #5
 8004a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a24:	0150      	lsls	r0, r2, #5
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	ebb2 080a 	subs.w	r8, r2, sl
 8004a2e:	eb63 090b 	sbc.w	r9, r3, fp
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a46:	ebb2 0408 	subs.w	r4, r2, r8
 8004a4a:	eb63 0509 	sbc.w	r5, r3, r9
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	00eb      	lsls	r3, r5, #3
 8004a58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a5c:	00e2      	lsls	r2, r4, #3
 8004a5e:	4614      	mov	r4, r2
 8004a60:	461d      	mov	r5, r3
 8004a62:	eb14 030a 	adds.w	r3, r4, sl
 8004a66:	603b      	str	r3, [r7, #0]
 8004a68:	eb45 030b 	adc.w	r3, r5, fp
 8004a6c:	607b      	str	r3, [r7, #4]
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	028b      	lsls	r3, r1, #10
 8004a7e:	4621      	mov	r1, r4
 8004a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a84:	4621      	mov	r1, r4
 8004a86:	028a      	lsls	r2, r1, #10
 8004a88:	4610      	mov	r0, r2
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8e:	2200      	movs	r2, #0
 8004a90:	60bb      	str	r3, [r7, #8]
 8004a92:	60fa      	str	r2, [r7, #12]
 8004a94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a98:	f7fb fec4 	bl	8000824 <__aeabi_uldivmod>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	3301      	adds	r3, #1
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004ab4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004abe:	e002      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ac0:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ac2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3740      	adds	r7, #64	; 0x40
 8004acc:	46bd      	mov	sp, r7
 8004ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40023800 	.word	0x40023800
 8004ad8:	00f42400 	.word	0x00f42400
 8004adc:	017d7840 	.word	0x017d7840

08004ae0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e273      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d075      	beq.n	8004bea <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004afe:	4b88      	ldr	r3, [pc, #544]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d00c      	beq.n	8004b24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b0a:	4b85      	ldr	r3, [pc, #532]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d112      	bne.n	8004b3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b16:	4b82      	ldr	r3, [pc, #520]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b22:	d10b      	bne.n	8004b3c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b24:	4b7e      	ldr	r3, [pc, #504]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d05b      	beq.n	8004be8 <HAL_RCC_OscConfig+0x108>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d157      	bne.n	8004be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e24e      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b44:	d106      	bne.n	8004b54 <HAL_RCC_OscConfig+0x74>
 8004b46:	4b76      	ldr	r3, [pc, #472]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a75      	ldr	r2, [pc, #468]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	e01d      	b.n	8004b90 <HAL_RCC_OscConfig+0xb0>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b5c:	d10c      	bne.n	8004b78 <HAL_RCC_OscConfig+0x98>
 8004b5e:	4b70      	ldr	r3, [pc, #448]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a6f      	ldr	r2, [pc, #444]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	4b6d      	ldr	r3, [pc, #436]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a6c      	ldr	r2, [pc, #432]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	e00b      	b.n	8004b90 <HAL_RCC_OscConfig+0xb0>
 8004b78:	4b69      	ldr	r3, [pc, #420]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a68      	ldr	r2, [pc, #416]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	4b66      	ldr	r3, [pc, #408]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a65      	ldr	r2, [pc, #404]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d013      	beq.n	8004bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fd fb7c 	bl	8002294 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba0:	f7fd fb78 	bl	8002294 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b64      	cmp	r3, #100	; 0x64
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e213      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb2:	4b5b      	ldr	r3, [pc, #364]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0xc0>
 8004bbe:	e014      	b.n	8004bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc0:	f7fd fb68 	bl	8002294 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bc8:	f7fd fb64 	bl	8002294 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b64      	cmp	r3, #100	; 0x64
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e1ff      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bda:	4b51      	ldr	r3, [pc, #324]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0xe8>
 8004be6:	e000      	b.n	8004bea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d063      	beq.n	8004cbe <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004bf6:	4b4a      	ldr	r3, [pc, #296]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 030c 	and.w	r3, r3, #12
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00b      	beq.n	8004c1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c02:	4b47      	ldr	r3, [pc, #284]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d11c      	bne.n	8004c48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c0e:	4b44      	ldr	r3, [pc, #272]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d116      	bne.n	8004c48 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c1a:	4b41      	ldr	r3, [pc, #260]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <HAL_RCC_OscConfig+0x152>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d001      	beq.n	8004c32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e1d3      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c32:	4b3b      	ldr	r3, [pc, #236]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	4937      	ldr	r1, [pc, #220]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c46:	e03a      	b.n	8004cbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d020      	beq.n	8004c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c50:	4b34      	ldr	r3, [pc, #208]	; (8004d24 <HAL_RCC_OscConfig+0x244>)
 8004c52:	2201      	movs	r2, #1
 8004c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c56:	f7fd fb1d 	bl	8002294 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c5e:	f7fd fb19 	bl	8002294 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e1b4      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c70:	4b2b      	ldr	r3, [pc, #172]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0f0      	beq.n	8004c5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7c:	4b28      	ldr	r3, [pc, #160]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	4925      	ldr	r1, [pc, #148]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	600b      	str	r3, [r1, #0]
 8004c90:	e015      	b.n	8004cbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c92:	4b24      	ldr	r3, [pc, #144]	; (8004d24 <HAL_RCC_OscConfig+0x244>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c98:	f7fd fafc 	bl	8002294 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ca0:	f7fd faf8 	bl	8002294 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e193      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cb2:	4b1b      	ldr	r3, [pc, #108]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f0      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d036      	beq.n	8004d38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d016      	beq.n	8004d00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cd2:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <HAL_RCC_OscConfig+0x248>)
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd8:	f7fd fadc 	bl	8002294 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ce0:	f7fd fad8 	bl	8002294 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e173      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cf2:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0f0      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x200>
 8004cfe:	e01b      	b.n	8004d38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d00:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <HAL_RCC_OscConfig+0x248>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d06:	f7fd fac5 	bl	8002294 <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d0c:	e00e      	b.n	8004d2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d0e:	f7fd fac1 	bl	8002294 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d907      	bls.n	8004d2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e15c      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
 8004d20:	40023800 	.word	0x40023800
 8004d24:	42470000 	.word	0x42470000
 8004d28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d2c:	4b8a      	ldr	r3, [pc, #552]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1ea      	bne.n	8004d0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8097 	beq.w	8004e74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d46:	2300      	movs	r3, #0
 8004d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4a:	4b83      	ldr	r3, [pc, #524]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10f      	bne.n	8004d76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	4b7f      	ldr	r3, [pc, #508]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	4a7e      	ldr	r2, [pc, #504]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d64:	6413      	str	r3, [r2, #64]	; 0x40
 8004d66:	4b7c      	ldr	r3, [pc, #496]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d72:	2301      	movs	r3, #1
 8004d74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d76:	4b79      	ldr	r3, [pc, #484]	; (8004f5c <HAL_RCC_OscConfig+0x47c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d118      	bne.n	8004db4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d82:	4b76      	ldr	r3, [pc, #472]	; (8004f5c <HAL_RCC_OscConfig+0x47c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a75      	ldr	r2, [pc, #468]	; (8004f5c <HAL_RCC_OscConfig+0x47c>)
 8004d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d8e:	f7fd fa81 	bl	8002294 <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d96:	f7fd fa7d 	bl	8002294 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e118      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da8:	4b6c      	ldr	r3, [pc, #432]	; (8004f5c <HAL_RCC_OscConfig+0x47c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0f0      	beq.n	8004d96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d106      	bne.n	8004dca <HAL_RCC_OscConfig+0x2ea>
 8004dbc:	4b66      	ldr	r3, [pc, #408]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	4a65      	ldr	r2, [pc, #404]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc8:	e01c      	b.n	8004e04 <HAL_RCC_OscConfig+0x324>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b05      	cmp	r3, #5
 8004dd0:	d10c      	bne.n	8004dec <HAL_RCC_OscConfig+0x30c>
 8004dd2:	4b61      	ldr	r3, [pc, #388]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd6:	4a60      	ldr	r2, [pc, #384]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004dd8:	f043 0304 	orr.w	r3, r3, #4
 8004ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dde:	4b5e      	ldr	r3, [pc, #376]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de2:	4a5d      	ldr	r2, [pc, #372]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004de4:	f043 0301 	orr.w	r3, r3, #1
 8004de8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dea:	e00b      	b.n	8004e04 <HAL_RCC_OscConfig+0x324>
 8004dec:	4b5a      	ldr	r3, [pc, #360]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df0:	4a59      	ldr	r2, [pc, #356]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004df2:	f023 0301 	bic.w	r3, r3, #1
 8004df6:	6713      	str	r3, [r2, #112]	; 0x70
 8004df8:	4b57      	ldr	r3, [pc, #348]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfc:	4a56      	ldr	r2, [pc, #344]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004dfe:	f023 0304 	bic.w	r3, r3, #4
 8004e02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d015      	beq.n	8004e38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0c:	f7fd fa42 	bl	8002294 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e12:	e00a      	b.n	8004e2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e14:	f7fd fa3e 	bl	8002294 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e0d7      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2a:	4b4b      	ldr	r3, [pc, #300]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0ee      	beq.n	8004e14 <HAL_RCC_OscConfig+0x334>
 8004e36:	e014      	b.n	8004e62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e38:	f7fd fa2c 	bl	8002294 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e3e:	e00a      	b.n	8004e56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e40:	f7fd fa28 	bl	8002294 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e0c1      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e56:	4b40      	ldr	r3, [pc, #256]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1ee      	bne.n	8004e40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e62:	7dfb      	ldrb	r3, [r7, #23]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d105      	bne.n	8004e74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e68:	4b3b      	ldr	r3, [pc, #236]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	4a3a      	ldr	r2, [pc, #232]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 80ad 	beq.w	8004fd8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e7e:	4b36      	ldr	r3, [pc, #216]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d060      	beq.n	8004f4c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d145      	bne.n	8004f1e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e92:	4b33      	ldr	r3, [pc, #204]	; (8004f60 <HAL_RCC_OscConfig+0x480>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fd f9fc 	bl	8002294 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea0:	f7fd f9f8 	bl	8002294 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e093      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb2:	4b29      	ldr	r3, [pc, #164]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69da      	ldr	r2, [r3, #28]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	019b      	lsls	r3, r3, #6
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	041b      	lsls	r3, r3, #16
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	061b      	lsls	r3, r3, #24
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	071b      	lsls	r3, r3, #28
 8004eea:	491b      	ldr	r1, [pc, #108]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ef0:	4b1b      	ldr	r3, [pc, #108]	; (8004f60 <HAL_RCC_OscConfig+0x480>)
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef6:	f7fd f9cd 	bl	8002294 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004efe:	f7fd f9c9 	bl	8002294 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e064      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f10:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0f0      	beq.n	8004efe <HAL_RCC_OscConfig+0x41e>
 8004f1c:	e05c      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f1e:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <HAL_RCC_OscConfig+0x480>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f24:	f7fd f9b6 	bl	8002294 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f2c:	f7fd f9b2 	bl	8002294 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e04d      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f3e:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1f0      	bne.n	8004f2c <HAL_RCC_OscConfig+0x44c>
 8004f4a:	e045      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d107      	bne.n	8004f64 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e040      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	40007000 	.word	0x40007000
 8004f60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f64:	4b1f      	ldr	r3, [pc, #124]	; (8004fe4 <HAL_RCC_OscConfig+0x504>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d030      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d129      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d122      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f94:	4013      	ands	r3, r2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d119      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	085b      	lsrs	r3, r3, #1
 8004fac:	3b01      	subs	r3, #1
 8004fae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d10f      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d107      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d001      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40023800 	.word	0x40023800

08004fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e041      	b.n	800507e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7fc ff44 	bl	8001e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3304      	adds	r3, #4
 8005024:	4619      	mov	r1, r3
 8005026:	4610      	mov	r0, r2
 8005028:	f000 fdae 	bl	8005b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e041      	b.n	800511c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d106      	bne.n	80050b2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7fc fe57 	bl	8001d60 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2202      	movs	r2, #2
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3304      	adds	r3, #4
 80050c2:	4619      	mov	r1, r3
 80050c4:	4610      	mov	r0, r2
 80050c6:	f000 fd5f 	bl	8005b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d104      	bne.n	8005146 <HAL_TIM_IC_Start_DMA+0x22>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005142:	b2db      	uxtb	r3, r3
 8005144:	e013      	b.n	800516e <HAL_TIM_IC_Start_DMA+0x4a>
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b04      	cmp	r3, #4
 800514a:	d104      	bne.n	8005156 <HAL_TIM_IC_Start_DMA+0x32>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005152:	b2db      	uxtb	r3, r3
 8005154:	e00b      	b.n	800516e <HAL_TIM_IC_Start_DMA+0x4a>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b08      	cmp	r3, #8
 800515a:	d104      	bne.n	8005166 <HAL_TIM_IC_Start_DMA+0x42>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005162:	b2db      	uxtb	r3, r3
 8005164:	e003      	b.n	800516e <HAL_TIM_IC_Start_DMA+0x4a>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800516c:	b2db      	uxtb	r3, r3
 800516e:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d104      	bne.n	8005180 <HAL_TIM_IC_Start_DMA+0x5c>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800517c:	b2db      	uxtb	r3, r3
 800517e:	e013      	b.n	80051a8 <HAL_TIM_IC_Start_DMA+0x84>
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2b04      	cmp	r3, #4
 8005184:	d104      	bne.n	8005190 <HAL_TIM_IC_Start_DMA+0x6c>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800518c:	b2db      	uxtb	r3, r3
 800518e:	e00b      	b.n	80051a8 <HAL_TIM_IC_Start_DMA+0x84>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b08      	cmp	r3, #8
 8005194:	d104      	bne.n	80051a0 <HAL_TIM_IC_Start_DMA+0x7c>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800519c:	b2db      	uxtb	r3, r3
 800519e:	e003      	b.n	80051a8 <HAL_TIM_IC_Start_DMA+0x84>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80051aa:	7dbb      	ldrb	r3, [r7, #22]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d002      	beq.n	80051b6 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80051b0:	7d7b      	ldrb	r3, [r7, #21]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d101      	bne.n	80051ba <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 80051b6:	2302      	movs	r3, #2
 80051b8:	e146      	b.n	8005448 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80051ba:	7dbb      	ldrb	r3, [r7, #22]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d143      	bne.n	8005248 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80051c0:	7d7b      	ldrb	r3, [r7, #21]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d140      	bne.n	8005248 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d104      	bne.n	80051d6 <HAL_TIM_IC_Start_DMA+0xb2>
 80051cc:	887b      	ldrh	r3, [r7, #2]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e138      	b.n	8005448 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d104      	bne.n	80051e6 <HAL_TIM_IC_Start_DMA+0xc2>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051e4:	e013      	b.n	800520e <HAL_TIM_IC_Start_DMA+0xea>
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d104      	bne.n	80051f6 <HAL_TIM_IC_Start_DMA+0xd2>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051f4:	e00b      	b.n	800520e <HAL_TIM_IC_Start_DMA+0xea>
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d104      	bne.n	8005206 <HAL_TIM_IC_Start_DMA+0xe2>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005204:	e003      	b.n	800520e <HAL_TIM_IC_Start_DMA+0xea>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2202      	movs	r2, #2
 800520a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d104      	bne.n	800521e <HAL_TIM_IC_Start_DMA+0xfa>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 800521c:	e016      	b.n	800524c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b04      	cmp	r3, #4
 8005222:	d104      	bne.n	800522e <HAL_TIM_IC_Start_DMA+0x10a>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 800522c:	e00e      	b.n	800524c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b08      	cmp	r3, #8
 8005232:	d104      	bne.n	800523e <HAL_TIM_IC_Start_DMA+0x11a>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800523c:	e006      	b.n	800524c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2202      	movs	r2, #2
 8005242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8005246:	e001      	b.n	800524c <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e0fd      	b.n	8005448 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2201      	movs	r2, #1
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fefb 	bl	8006050 <TIM_CCxChannelCmd>

  switch (Channel)
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b0c      	cmp	r3, #12
 800525e:	f200 80ad 	bhi.w	80053bc <HAL_TIM_IC_Start_DMA+0x298>
 8005262:	a201      	add	r2, pc, #4	; (adr r2, 8005268 <HAL_TIM_IC_Start_DMA+0x144>)
 8005264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005268:	0800529d 	.word	0x0800529d
 800526c:	080053bd 	.word	0x080053bd
 8005270:	080053bd 	.word	0x080053bd
 8005274:	080053bd 	.word	0x080053bd
 8005278:	080052e5 	.word	0x080052e5
 800527c:	080053bd 	.word	0x080053bd
 8005280:	080053bd 	.word	0x080053bd
 8005284:	080053bd 	.word	0x080053bd
 8005288:	0800532d 	.word	0x0800532d
 800528c:	080053bd 	.word	0x080053bd
 8005290:	080053bd 	.word	0x080053bd
 8005294:	080053bd 	.word	0x080053bd
 8005298:	08005375 	.word	0x08005375
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	4a6b      	ldr	r2, [pc, #428]	; (8005450 <HAL_TIM_IC_Start_DMA+0x32c>)
 80052a2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	4a6a      	ldr	r2, [pc, #424]	; (8005454 <HAL_TIM_IC_Start_DMA+0x330>)
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	4a69      	ldr	r2, [pc, #420]	; (8005458 <HAL_TIM_IC_Start_DMA+0x334>)
 80052b2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3334      	adds	r3, #52	; 0x34
 80052be:	4619      	mov	r1, r3
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	887b      	ldrh	r3, [r7, #2]
 80052c4:	f7fe fd9a 	bl	8003dfc <HAL_DMA_Start_IT>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e0ba      	b.n	8005448 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e0:	60da      	str	r2, [r3, #12]
      break;
 80052e2:	e06e      	b.n	80053c2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e8:	4a59      	ldr	r2, [pc, #356]	; (8005450 <HAL_TIM_IC_Start_DMA+0x32c>)
 80052ea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f0:	4a58      	ldr	r2, [pc, #352]	; (8005454 <HAL_TIM_IC_Start_DMA+0x330>)
 80052f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f8:	4a57      	ldr	r2, [pc, #348]	; (8005458 <HAL_TIM_IC_Start_DMA+0x334>)
 80052fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3338      	adds	r3, #56	; 0x38
 8005306:	4619      	mov	r1, r3
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	887b      	ldrh	r3, [r7, #2]
 800530c:	f7fe fd76 	bl	8003dfc <HAL_DMA_Start_IT>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e096      	b.n	8005448 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68da      	ldr	r2, [r3, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005328:	60da      	str	r2, [r3, #12]
      break;
 800532a:	e04a      	b.n	80053c2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005330:	4a47      	ldr	r2, [pc, #284]	; (8005450 <HAL_TIM_IC_Start_DMA+0x32c>)
 8005332:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	4a46      	ldr	r2, [pc, #280]	; (8005454 <HAL_TIM_IC_Start_DMA+0x330>)
 800533a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	4a45      	ldr	r2, [pc, #276]	; (8005458 <HAL_TIM_IC_Start_DMA+0x334>)
 8005342:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	333c      	adds	r3, #60	; 0x3c
 800534e:	4619      	mov	r1, r3
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	887b      	ldrh	r3, [r7, #2]
 8005354:	f7fe fd52 	bl	8003dfc <HAL_DMA_Start_IT>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e072      	b.n	8005448 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005370:	60da      	str	r2, [r3, #12]
      break;
 8005372:	e026      	b.n	80053c2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005378:	4a35      	ldr	r2, [pc, #212]	; (8005450 <HAL_TIM_IC_Start_DMA+0x32c>)
 800537a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005380:	4a34      	ldr	r2, [pc, #208]	; (8005454 <HAL_TIM_IC_Start_DMA+0x330>)
 8005382:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	4a33      	ldr	r2, [pc, #204]	; (8005458 <HAL_TIM_IC_Start_DMA+0x334>)
 800538a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3340      	adds	r3, #64	; 0x40
 8005396:	4619      	mov	r1, r3
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	887b      	ldrh	r3, [r7, #2]
 800539c:	f7fe fd2e 	bl	8003dfc <HAL_DMA_Start_IT>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e04e      	b.n	8005448 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053b8:	60da      	str	r2, [r3, #12]
      break;
 80053ba:	e002      	b.n	80053c2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	75fb      	strb	r3, [r7, #23]
      break;
 80053c0:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a25      	ldr	r2, [pc, #148]	; (800545c <HAL_TIM_IC_Start_DMA+0x338>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d022      	beq.n	8005412 <HAL_TIM_IC_Start_DMA+0x2ee>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d4:	d01d      	beq.n	8005412 <HAL_TIM_IC_Start_DMA+0x2ee>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a21      	ldr	r2, [pc, #132]	; (8005460 <HAL_TIM_IC_Start_DMA+0x33c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d018      	beq.n	8005412 <HAL_TIM_IC_Start_DMA+0x2ee>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a1f      	ldr	r2, [pc, #124]	; (8005464 <HAL_TIM_IC_Start_DMA+0x340>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d013      	beq.n	8005412 <HAL_TIM_IC_Start_DMA+0x2ee>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a1e      	ldr	r2, [pc, #120]	; (8005468 <HAL_TIM_IC_Start_DMA+0x344>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00e      	beq.n	8005412 <HAL_TIM_IC_Start_DMA+0x2ee>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a1c      	ldr	r2, [pc, #112]	; (800546c <HAL_TIM_IC_Start_DMA+0x348>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d009      	beq.n	8005412 <HAL_TIM_IC_Start_DMA+0x2ee>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a1b      	ldr	r2, [pc, #108]	; (8005470 <HAL_TIM_IC_Start_DMA+0x34c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d004      	beq.n	8005412 <HAL_TIM_IC_Start_DMA+0x2ee>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a19      	ldr	r2, [pc, #100]	; (8005474 <HAL_TIM_IC_Start_DMA+0x350>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d111      	bne.n	8005436 <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	2b06      	cmp	r3, #6
 8005422:	d010      	beq.n	8005446 <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0201 	orr.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005434:	e007      	b.n	8005446 <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0201 	orr.w	r2, r2, #1
 8005444:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005446:	7dfb      	ldrb	r3, [r7, #23]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	08005a59 	.word	0x08005a59
 8005454:	08005b21 	.word	0x08005b21
 8005458:	080059c7 	.word	0x080059c7
 800545c:	40010000 	.word	0x40010000
 8005460:	40000400 	.word	0x40000400
 8005464:	40000800 	.word	0x40000800
 8005468:	40000c00 	.word	0x40000c00
 800546c:	40010400 	.word	0x40010400
 8005470:	40014000 	.word	0x40014000
 8005474:	40001800 	.word	0x40001800

08005478 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b02      	cmp	r3, #2
 800548c:	d122      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b02      	cmp	r3, #2
 800549a:	d11b      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0202 	mvn.w	r2, #2
 80054a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7fc f902 	bl	80016c4 <HAL_TIM_IC_CaptureCallback>
 80054c0:	e005      	b.n	80054ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fa4d 	bl	8005962 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fa5e 	bl	800598a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d122      	bne.n	8005528 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d11b      	bne.n	8005528 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0204 	mvn.w	r2, #4
 80054f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2202      	movs	r2, #2
 80054fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7fc f8d8 	bl	80016c4 <HAL_TIM_IC_CaptureCallback>
 8005514:	e005      	b.n	8005522 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fa23 	bl	8005962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fa34 	bl	800598a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0308 	and.w	r3, r3, #8
 8005532:	2b08      	cmp	r3, #8
 8005534:	d122      	bne.n	800557c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b08      	cmp	r3, #8
 8005542:	d11b      	bne.n	800557c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0208 	mvn.w	r2, #8
 800554c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2204      	movs	r2, #4
 8005552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fc f8ae 	bl	80016c4 <HAL_TIM_IC_CaptureCallback>
 8005568:	e005      	b.n	8005576 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f9f9 	bl	8005962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fa0a 	bl	800598a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0310 	and.w	r3, r3, #16
 8005586:	2b10      	cmp	r3, #16
 8005588:	d122      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	2b10      	cmp	r3, #16
 8005596:	d11b      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0210 	mvn.w	r2, #16
 80055a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2208      	movs	r2, #8
 80055a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fc f884 	bl	80016c4 <HAL_TIM_IC_CaptureCallback>
 80055bc:	e005      	b.n	80055ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f9cf 	bl	8005962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f9e0 	bl	800598a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d10e      	bne.n	80055fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d107      	bne.n	80055fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0201 	mvn.w	r2, #1
 80055f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f9a9 	bl	800594e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005606:	2b80      	cmp	r3, #128	; 0x80
 8005608:	d10e      	bne.n	8005628 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005614:	2b80      	cmp	r3, #128	; 0x80
 8005616:	d107      	bne.n	8005628 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fdc0 	bl	80061a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005632:	2b40      	cmp	r3, #64	; 0x40
 8005634:	d10e      	bne.n	8005654 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005640:	2b40      	cmp	r3, #64	; 0x40
 8005642:	d107      	bne.n	8005654 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800564c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f9a5 	bl	800599e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b20      	cmp	r3, #32
 8005660:	d10e      	bne.n	8005680 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0320 	and.w	r3, r3, #32
 800566c:	2b20      	cmp	r3, #32
 800566e:	d107      	bne.n	8005680 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0220 	mvn.w	r2, #32
 8005678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fd8a 	bl	8006194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005680:	bf00      	nop
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e088      	b.n	80057b8 <HAL_TIM_IC_ConfigChannel+0x130>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d11b      	bne.n	80056ec <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	6819      	ldr	r1, [r3, #0]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f000 fb00 	bl	8005cc8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 020c 	bic.w	r2, r2, #12
 80056d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6999      	ldr	r1, [r3, #24]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	619a      	str	r2, [r3, #24]
 80056ea:	e060      	b.n	80057ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d11c      	bne.n	800572c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	6819      	ldr	r1, [r3, #0]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f000 fb84 	bl	8005e0e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	699a      	ldr	r2, [r3, #24]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005714:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6999      	ldr	r1, [r3, #24]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	021a      	lsls	r2, r3, #8
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	619a      	str	r2, [r3, #24]
 800572a:	e040      	b.n	80057ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b08      	cmp	r3, #8
 8005730:	d11b      	bne.n	800576a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6818      	ldr	r0, [r3, #0]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	6819      	ldr	r1, [r3, #0]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f000 fbd1 	bl	8005ee8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 020c 	bic.w	r2, r2, #12
 8005754:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69d9      	ldr	r1, [r3, #28]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	61da      	str	r2, [r3, #28]
 8005768:	e021      	b.n	80057ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b0c      	cmp	r3, #12
 800576e:	d11c      	bne.n	80057aa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6818      	ldr	r0, [r3, #0]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	6819      	ldr	r1, [r3, #0]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f000 fbee 	bl	8005f60 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69da      	ldr	r2, [r3, #28]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005792:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	69d9      	ldr	r1, [r3, #28]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	021a      	lsls	r2, r3, #8
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	61da      	str	r2, [r3, #28]
 80057a8:	e001      	b.n	80057ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_TIM_ConfigClockSource+0x1c>
 80057d8:	2302      	movs	r3, #2
 80057da:	e0b4      	b.n	8005946 <HAL_TIM_ConfigClockSource+0x186>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005802:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005814:	d03e      	beq.n	8005894 <HAL_TIM_ConfigClockSource+0xd4>
 8005816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800581a:	f200 8087 	bhi.w	800592c <HAL_TIM_ConfigClockSource+0x16c>
 800581e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005822:	f000 8086 	beq.w	8005932 <HAL_TIM_ConfigClockSource+0x172>
 8005826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582a:	d87f      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 800582c:	2b70      	cmp	r3, #112	; 0x70
 800582e:	d01a      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0xa6>
 8005830:	2b70      	cmp	r3, #112	; 0x70
 8005832:	d87b      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 8005834:	2b60      	cmp	r3, #96	; 0x60
 8005836:	d050      	beq.n	80058da <HAL_TIM_ConfigClockSource+0x11a>
 8005838:	2b60      	cmp	r3, #96	; 0x60
 800583a:	d877      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 800583c:	2b50      	cmp	r3, #80	; 0x50
 800583e:	d03c      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0xfa>
 8005840:	2b50      	cmp	r3, #80	; 0x50
 8005842:	d873      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 8005844:	2b40      	cmp	r3, #64	; 0x40
 8005846:	d058      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0x13a>
 8005848:	2b40      	cmp	r3, #64	; 0x40
 800584a:	d86f      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 800584c:	2b30      	cmp	r3, #48	; 0x30
 800584e:	d064      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x15a>
 8005850:	2b30      	cmp	r3, #48	; 0x30
 8005852:	d86b      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 8005854:	2b20      	cmp	r3, #32
 8005856:	d060      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x15a>
 8005858:	2b20      	cmp	r3, #32
 800585a:	d867      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d05c      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x15a>
 8005860:	2b10      	cmp	r3, #16
 8005862:	d05a      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x15a>
 8005864:	e062      	b.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6818      	ldr	r0, [r3, #0]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	6899      	ldr	r1, [r3, #8]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f000 fbcb 	bl	8006010 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005888:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	609a      	str	r2, [r3, #8]
      break;
 8005892:	e04f      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6818      	ldr	r0, [r3, #0]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	6899      	ldr	r1, [r3, #8]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f000 fbb4 	bl	8006010 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058b6:	609a      	str	r2, [r3, #8]
      break;
 80058b8:	e03c      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6859      	ldr	r1, [r3, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	461a      	mov	r2, r3
 80058c8:	f000 fa72 	bl	8005db0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2150      	movs	r1, #80	; 0x50
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fb81 	bl	8005fda <TIM_ITRx_SetConfig>
      break;
 80058d8:	e02c      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	6859      	ldr	r1, [r3, #4]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	461a      	mov	r2, r3
 80058e8:	f000 face 	bl	8005e88 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2160      	movs	r1, #96	; 0x60
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fb71 	bl	8005fda <TIM_ITRx_SetConfig>
      break;
 80058f8:	e01c      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	6859      	ldr	r1, [r3, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	461a      	mov	r2, r3
 8005908:	f000 fa52 	bl	8005db0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2140      	movs	r1, #64	; 0x40
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fb61 	bl	8005fda <TIM_ITRx_SetConfig>
      break;
 8005918:	e00c      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4619      	mov	r1, r3
 8005924:	4610      	mov	r0, r2
 8005926:	f000 fb58 	bl	8005fda <TIM_ITRx_SetConfig>
      break;
 800592a:	e003      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	73fb      	strb	r3, [r7, #15]
      break;
 8005930:	e000      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005932:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005944:	7bfb      	ldrb	r3, [r7, #15]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800597e:	bf00      	nop
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b084      	sub	sp, #16
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d107      	bne.n	80059ee <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2201      	movs	r2, #1
 80059e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059ec:	e02a      	b.n	8005a44 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d107      	bne.n	8005a08 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2202      	movs	r2, #2
 80059fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a06:	e01d      	b.n	8005a44 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d107      	bne.n	8005a22 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2204      	movs	r2, #4
 8005a16:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a20:	e010      	b.n	8005a44 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d107      	bne.n	8005a3c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2208      	movs	r2, #8
 8005a30:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a3a:	e003      	b.n	8005a44 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f7ff ffb4 	bl	80059b2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	771a      	strb	r2, [r3, #28]
}
 8005a50:	bf00      	nop
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d10f      	bne.n	8005a90 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d146      	bne.n	8005b0c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a8e:	e03d      	b.n	8005b0c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d10f      	bne.n	8005aba <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d131      	bne.n	8005b0c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ab8:	e028      	b.n	8005b0c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d10f      	bne.n	8005ae4 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2204      	movs	r2, #4
 8005ac8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d11c      	bne.n	8005b0c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ae2:	e013      	b.n	8005b0c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d10e      	bne.n	8005b0c <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2208      	movs	r2, #8
 8005af2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d107      	bne.n	8005b0c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f7fb fdd9 	bl	80016c4 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	771a      	strb	r2, [r3, #28]
}
 8005b18:	bf00      	nop
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d103      	bne.n	8005b40 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	771a      	strb	r2, [r3, #28]
 8005b3e:	e019      	b.n	8005b74 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d103      	bne.n	8005b52 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	771a      	strb	r2, [r3, #28]
 8005b50:	e010      	b.n	8005b74 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d103      	bne.n	8005b64 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2204      	movs	r2, #4
 8005b60:	771a      	strb	r2, [r3, #28]
 8005b62:	e007      	b.n	8005b74 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d102      	bne.n	8005b74 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2208      	movs	r2, #8
 8005b72:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f7ff fefe 	bl	8005976 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	771a      	strb	r2, [r3, #28]
}
 8005b80:	bf00      	nop
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a40      	ldr	r2, [pc, #256]	; (8005c9c <TIM_Base_SetConfig+0x114>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d013      	beq.n	8005bc8 <TIM_Base_SetConfig+0x40>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba6:	d00f      	beq.n	8005bc8 <TIM_Base_SetConfig+0x40>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a3d      	ldr	r2, [pc, #244]	; (8005ca0 <TIM_Base_SetConfig+0x118>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00b      	beq.n	8005bc8 <TIM_Base_SetConfig+0x40>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a3c      	ldr	r2, [pc, #240]	; (8005ca4 <TIM_Base_SetConfig+0x11c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d007      	beq.n	8005bc8 <TIM_Base_SetConfig+0x40>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a3b      	ldr	r2, [pc, #236]	; (8005ca8 <TIM_Base_SetConfig+0x120>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d003      	beq.n	8005bc8 <TIM_Base_SetConfig+0x40>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a3a      	ldr	r2, [pc, #232]	; (8005cac <TIM_Base_SetConfig+0x124>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d108      	bne.n	8005bda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a2f      	ldr	r2, [pc, #188]	; (8005c9c <TIM_Base_SetConfig+0x114>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d02b      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be8:	d027      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a2c      	ldr	r2, [pc, #176]	; (8005ca0 <TIM_Base_SetConfig+0x118>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d023      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a2b      	ldr	r2, [pc, #172]	; (8005ca4 <TIM_Base_SetConfig+0x11c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01f      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a2a      	ldr	r2, [pc, #168]	; (8005ca8 <TIM_Base_SetConfig+0x120>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d01b      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a29      	ldr	r2, [pc, #164]	; (8005cac <TIM_Base_SetConfig+0x124>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d017      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a28      	ldr	r2, [pc, #160]	; (8005cb0 <TIM_Base_SetConfig+0x128>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d013      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a27      	ldr	r2, [pc, #156]	; (8005cb4 <TIM_Base_SetConfig+0x12c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d00f      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a26      	ldr	r2, [pc, #152]	; (8005cb8 <TIM_Base_SetConfig+0x130>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00b      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a25      	ldr	r2, [pc, #148]	; (8005cbc <TIM_Base_SetConfig+0x134>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d007      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a24      	ldr	r2, [pc, #144]	; (8005cc0 <TIM_Base_SetConfig+0x138>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d003      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a23      	ldr	r2, [pc, #140]	; (8005cc4 <TIM_Base_SetConfig+0x13c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d108      	bne.n	8005c4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a0a      	ldr	r2, [pc, #40]	; (8005c9c <TIM_Base_SetConfig+0x114>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_Base_SetConfig+0xf8>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a0c      	ldr	r2, [pc, #48]	; (8005cac <TIM_Base_SetConfig+0x124>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d103      	bne.n	8005c88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	691a      	ldr	r2, [r3, #16]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	615a      	str	r2, [r3, #20]
}
 8005c8e:	bf00      	nop
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	40010000 	.word	0x40010000
 8005ca0:	40000400 	.word	0x40000400
 8005ca4:	40000800 	.word	0x40000800
 8005ca8:	40000c00 	.word	0x40000c00
 8005cac:	40010400 	.word	0x40010400
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	40014400 	.word	0x40014400
 8005cb8:	40014800 	.word	0x40014800
 8005cbc:	40001800 	.word	0x40001800
 8005cc0:	40001c00 	.word	0x40001c00
 8005cc4:	40002000 	.word	0x40002000

08005cc8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	f023 0201 	bic.w	r2, r3, #1
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	4a28      	ldr	r2, [pc, #160]	; (8005d94 <TIM_TI1_SetConfig+0xcc>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d01b      	beq.n	8005d2e <TIM_TI1_SetConfig+0x66>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfc:	d017      	beq.n	8005d2e <TIM_TI1_SetConfig+0x66>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4a25      	ldr	r2, [pc, #148]	; (8005d98 <TIM_TI1_SetConfig+0xd0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d013      	beq.n	8005d2e <TIM_TI1_SetConfig+0x66>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4a24      	ldr	r2, [pc, #144]	; (8005d9c <TIM_TI1_SetConfig+0xd4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00f      	beq.n	8005d2e <TIM_TI1_SetConfig+0x66>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4a23      	ldr	r2, [pc, #140]	; (8005da0 <TIM_TI1_SetConfig+0xd8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00b      	beq.n	8005d2e <TIM_TI1_SetConfig+0x66>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4a22      	ldr	r2, [pc, #136]	; (8005da4 <TIM_TI1_SetConfig+0xdc>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d007      	beq.n	8005d2e <TIM_TI1_SetConfig+0x66>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4a21      	ldr	r2, [pc, #132]	; (8005da8 <TIM_TI1_SetConfig+0xe0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d003      	beq.n	8005d2e <TIM_TI1_SetConfig+0x66>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4a20      	ldr	r2, [pc, #128]	; (8005dac <TIM_TI1_SetConfig+0xe4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d101      	bne.n	8005d32 <TIM_TI1_SetConfig+0x6a>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e000      	b.n	8005d34 <TIM_TI1_SetConfig+0x6c>
 8005d32:	2300      	movs	r3, #0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d008      	beq.n	8005d4a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f023 0303 	bic.w	r3, r3, #3
 8005d3e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	e003      	b.n	8005d52 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f043 0301 	orr.w	r3, r3, #1
 8005d50:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f023 030a 	bic.w	r3, r3, #10
 8005d6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f003 030a 	and.w	r3, r3, #10
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	621a      	str	r2, [r3, #32]
}
 8005d86:	bf00      	nop
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	40010000 	.word	0x40010000
 8005d98:	40000400 	.word	0x40000400
 8005d9c:	40000800 	.word	0x40000800
 8005da0:	40000c00 	.word	0x40000c00
 8005da4:	40010400 	.word	0x40010400
 8005da8:	40014000 	.word	0x40014000
 8005dac:	40001800 	.word	0x40001800

08005db0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f023 0201 	bic.w	r2, r3, #1
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f023 030a 	bic.w	r3, r3, #10
 8005dec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	621a      	str	r2, [r3, #32]
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b087      	sub	sp, #28
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	607a      	str	r2, [r7, #4]
 8005e1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	f023 0210 	bic.w	r2, r3, #16
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	021b      	lsls	r3, r3, #8
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	031b      	lsls	r3, r3, #12
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e60:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	621a      	str	r2, [r3, #32]
}
 8005e7c:	bf00      	nop
 8005e7e:	371c      	adds	r7, #28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	f023 0210 	bic.w	r2, r3, #16
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005eb2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	031b      	lsls	r3, r3, #12
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ec4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	621a      	str	r2, [r3, #32]
}
 8005edc:	bf00      	nop
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f023 0303 	bic.w	r3, r3, #3
 8005f14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005f38:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	021b      	lsls	r3, r3, #8
 8005f3e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	621a      	str	r2, [r3, #32]
}
 8005f54:	bf00      	nop
 8005f56:	371c      	adds	r7, #28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	021b      	lsls	r3, r3, #8
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f9e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	031b      	lsls	r3, r3, #12
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005fb2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	031b      	lsls	r3, r3, #12
 8005fb8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	621a      	str	r2, [r3, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b085      	sub	sp, #20
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	f043 0307 	orr.w	r3, r3, #7
 8005ffc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	609a      	str	r2, [r3, #8]
}
 8006004:	bf00      	nop
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
 800601c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800602a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	021a      	lsls	r2, r3, #8
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	431a      	orrs	r2, r3
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	4313      	orrs	r3, r2
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	4313      	orrs	r3, r2
 800603c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	609a      	str	r2, [r3, #8]
}
 8006044:	bf00      	nop
 8006046:	371c      	adds	r7, #28
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f003 031f 	and.w	r3, r3, #31
 8006062:	2201      	movs	r2, #1
 8006064:	fa02 f303 	lsl.w	r3, r2, r3
 8006068:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a1a      	ldr	r2, [r3, #32]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	43db      	mvns	r3, r3
 8006072:	401a      	ands	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a1a      	ldr	r2, [r3, #32]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f003 031f 	and.w	r3, r3, #31
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	fa01 f303 	lsl.w	r3, r1, r3
 8006088:	431a      	orrs	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	621a      	str	r2, [r3, #32]
}
 800608e:	bf00      	nop
 8006090:	371c      	adds	r7, #28
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
	...

0800609c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d101      	bne.n	80060b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060b0:	2302      	movs	r3, #2
 80060b2:	e05a      	b.n	800616a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a21      	ldr	r2, [pc, #132]	; (8006178 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d022      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006100:	d01d      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a1d      	ldr	r2, [pc, #116]	; (800617c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d018      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a1b      	ldr	r2, [pc, #108]	; (8006180 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1a      	ldr	r2, [pc, #104]	; (8006184 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d00e      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a18      	ldr	r2, [pc, #96]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d009      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a17      	ldr	r2, [pc, #92]	; (800618c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d004      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a15      	ldr	r2, [pc, #84]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d10c      	bne.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006144:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	4313      	orrs	r3, r2
 800614e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	40010000 	.word	0x40010000
 800617c:	40000400 	.word	0x40000400
 8006180:	40000800 	.word	0x40000800
 8006184:	40000c00 	.word	0x40000c00
 8006188:	40010400 	.word	0x40010400
 800618c:	40014000 	.word	0x40014000
 8006190:	40001800 	.word	0x40001800

08006194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <__libc_init_array>:
 80061bc:	b570      	push	{r4, r5, r6, lr}
 80061be:	4d0d      	ldr	r5, [pc, #52]	; (80061f4 <__libc_init_array+0x38>)
 80061c0:	4c0d      	ldr	r4, [pc, #52]	; (80061f8 <__libc_init_array+0x3c>)
 80061c2:	1b64      	subs	r4, r4, r5
 80061c4:	10a4      	asrs	r4, r4, #2
 80061c6:	2600      	movs	r6, #0
 80061c8:	42a6      	cmp	r6, r4
 80061ca:	d109      	bne.n	80061e0 <__libc_init_array+0x24>
 80061cc:	4d0b      	ldr	r5, [pc, #44]	; (80061fc <__libc_init_array+0x40>)
 80061ce:	4c0c      	ldr	r4, [pc, #48]	; (8006200 <__libc_init_array+0x44>)
 80061d0:	f000 f820 	bl	8006214 <_init>
 80061d4:	1b64      	subs	r4, r4, r5
 80061d6:	10a4      	asrs	r4, r4, #2
 80061d8:	2600      	movs	r6, #0
 80061da:	42a6      	cmp	r6, r4
 80061dc:	d105      	bne.n	80061ea <__libc_init_array+0x2e>
 80061de:	bd70      	pop	{r4, r5, r6, pc}
 80061e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e4:	4798      	blx	r3
 80061e6:	3601      	adds	r6, #1
 80061e8:	e7ee      	b.n	80061c8 <__libc_init_array+0xc>
 80061ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ee:	4798      	blx	r3
 80061f0:	3601      	adds	r6, #1
 80061f2:	e7f2      	b.n	80061da <__libc_init_array+0x1e>
 80061f4:	0800624c 	.word	0x0800624c
 80061f8:	0800624c 	.word	0x0800624c
 80061fc:	0800624c 	.word	0x0800624c
 8006200:	08006250 	.word	0x08006250

08006204 <memset>:
 8006204:	4402      	add	r2, r0
 8006206:	4603      	mov	r3, r0
 8006208:	4293      	cmp	r3, r2
 800620a:	d100      	bne.n	800620e <memset+0xa>
 800620c:	4770      	bx	lr
 800620e:	f803 1b01 	strb.w	r1, [r3], #1
 8006212:	e7f9      	b.n	8006208 <memset+0x4>

08006214 <_init>:
 8006214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006216:	bf00      	nop
 8006218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621a:	bc08      	pop	{r3}
 800621c:	469e      	mov	lr, r3
 800621e:	4770      	bx	lr

08006220 <_fini>:
 8006220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006222:	bf00      	nop
 8006224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006226:	bc08      	pop	{r3}
 8006228:	469e      	mov	lr, r3
 800622a:	4770      	bx	lr
